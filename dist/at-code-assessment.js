!function(s){s.module("at.assessment",["ngMaterial","at.assessment.editor","at.assessment.submission"])}(angular),function(s){"use strict";function t(t,e,n){s.extend(this,t.current),t.load(this.asssessmentId).success(function(){this.assessment=t.current}).error(function(){n.show({template:"<md-toast>Error !</md-toast>"})}),this.reset=e.resetCurrent,this.submit=e.submitCurrent}function e(){return{restrict:"EA",scope:{assessmentId:"@"},templateUrl:"assessment.tpl.html",controller:"atAssessmentCtrl",controllerAs:"editor",transclude:!0}}function n(){function t(s){var t={};return t.current={},t.load=function(n){return s.get(e.baseUrl+n).success(function(s){t.current=s})},t}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},t.$inject=["$http"],this.$get=t}t.$inject=["atAssessment","atSubmission","$mdToast"],s.module("at.assessment.editor",["ui.ace","at.assessment.submission"]).directive("atAssessmentEditor",e).controller("atAssessmentCtrl",t).provider("atAssessment",n)}(angular),function(s){function t(){function t(t,n,r){var i={current:{assessment:{},code:"",finished:!1,result:{}}},u={};return s.extend(u,i),u.resetCurrent=function(){u.current=i,u.current.code=t.current.startCode},u.submitCurrent=function(){return u.submit(t.current,u.current.code)},u.submit=function(s,t){r.hide(),r.show({templateUrl:"submissionProgressDialog.html",clickOutsideToClose:!1,escapeToClose:!1}),u.current={assessment:s,code:t,finished:!1,result:{}};var i={code:t};return n.post(e.baseUrl+s.id,i).success(function(s){u.current.result=s}).error(function(s){console.log(s)}).finally(function(){r.hide(),u.current.finished=!0})},u.hasResult=function(){return u.current.assessment===t.current&&u.current.finished&&void 0!==u.current.result&&void 0!==u.current.result.pass},u}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},t.$inject=["atAssessment","$http","$mdDialog"],this.$get=t}s.module("at.assessment.submission",[]).provider("atSubmission",t)}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiYXNzZXNzbWVudC9hc3Nlc3NtZW50LmpzIiwic3VibWlzc2lvbi9zdWJtaXNzaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFNBQUEsR0FFQSxFQUFBLE9BQUEsaUJBQ0EsYUFDQSx1QkFDQSw4QkFFQSxTQ1BBLFNBQUEsR0FDQSxZQUVBLFNBQUEsR0FBQSxFQUFBLEVBQUEsR0FDQSxFQUFBLE9BQUEsS0FBQSxFQUFBLFNBQ0EsRUFBQSxLQUFBLEtBQUEsZUFBQSxRQUFBLFdBQ0EsS0FBQSxXQUFBLEVBQUEsVUFDQSxNQUFBLFdBQ0EsRUFBQSxNQUNBLFNBQUEsbUNBR0EsS0FBQSxNQUFBLEVBQUEsYUFDQSxLQUFBLE9BQUEsRUFBQSxjQUdBLFFBQUEsS0FDQSxPQUNBLFNBQUEsS0FDQSxPQUNBLGFBQUEsS0FFQSxZQUFBLHNCQUNBLFdBQUEsbUJBQ0EsYUFBQSxTQUNBLFlBQUEsR0FJQSxRQUFBLEtBVUEsUUFBQSxHQUFBLEdBQ0EsR0FBQSxLQVVBLE9BUkEsR0FBQSxXQUVBLEVBQUEsS0FBQSxTQUFBLEdBQ0EsTUFBQSxHQUFBLElBQUEsRUFBQSxRQUFBLEdBQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxRQUFBLEtBSUEsRUFuQkEsR0FBQSxJQUNBLFFBQUEsYUFHQSxNQUFBLE9BQUEsU0FBQSxHQUNBLEVBQUEsT0FBQSxFQUFBLHdCQWlCQSxLQUFBLEtBQUEsdURBSUEsRUFBQSxPQUFBLHdCQUNBLFNBQ0EsNkJBQ0EsVUFBQSxxQkFBQSxHQUNBLFdBQUEsbUJBQUEsR0FDQSxTQUFBLGVBQUEsSUFDQSxTQy9EQSxTQUFBLEdBQ0EsUUFBQSxLQVNBLFFBQUEsR0FBQSxFQUFBLEVBQUEsR0FDQSxHQUFBLElBQ0EsU0FDQSxjQUNBLEtBQUEsR0FDQSxVQUFBLEVBQ0EsWUFHQSxJQWdEQSxPQS9DQSxHQUFBLE9BQUEsRUFBQSxHQUVBLEVBQUEsYUFBQSxXQUNBLEVBQUEsUUFBQSxFQUNBLEVBQUEsUUFBQSxLQUFBLEVBQUEsUUFBQSxXQUdBLEVBQUEsY0FBQSxXQUNBLE1BQUEsR0FBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsT0FHQSxFQUFBLE9BQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxPQUNBLEVBQUEsTUFDQSxZQUFBLGdDQUNBLHFCQUFBLEVBQ0EsZUFBQSxJQUVBLEVBQUEsU0FDQSxXQUFBLEVBQ0EsS0FBQSxFQUNBLFVBQUEsRUFDQSxVQUVBLElBQUEsSUFDQSxLQUFBLEVBRUEsT0FBQSxHQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsR0FBQSxHQUNBLFFBQUEsU0FBQSxHQUNBLEVBQUEsUUFBQSxPQUFBLElBRUEsTUFBQSxTQUFBLEdBQ0EsUUFBQSxJQUFBLEtBRUEsUUFBQSxXQUNBLEVBQUEsT0FDQSxFQUFBLFFBQUEsVUFBQSxLQUlBLEVBQUEsVUFBQSxXQUNBLE1BQUEsR0FBQSxRQUFBLGFBQUEsRUFBQSxTQUNBLEVBQUEsUUFBQSxVQUNBLFNBQUEsRUFBQSxRQUFBLFFBQ0EsU0FBQSxFQUFBLFFBQUEsT0FBQSxNQUdBLEVBaEVBLEdBQUEsSUFDQSxRQUFBLGFBRUEsTUFBQSxPQUFBLFNBQUEsR0FDQSxFQUFBLE9BQUEsRUFBQSxtREErREEsS0FBQSxLQUFBLEVBR0EsRUFBQSxPQUFBLCtCQUNBLFNBQUEsZUFBQSxJQUNBIiwiZmlsZSI6ImF0LWNvZGUtYXNzZXNzbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihhbmd1bGFyKXtcblxuICBhbmd1bGFyLm1vZHVsZSgnYXQuYXNzZXNzbWVudCcsW1xuICAgICduZ01hdGVyaWFsJyxcbiAgICAnYXQuYXNzZXNzbWVudC5lZGl0b3InLFxuICAgICdhdC5hc3Nlc3NtZW50LnN1Ym1pc3Npb24nXG4gIF0pXG59KShhbmd1bGFyKTsiLCIoZnVuY3Rpb24oYW5ndWxhcil7XG4gICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBhdEFzc2Vzc21lbnRDdHJsKGF0QXNzZXNzbWVudCxhdFN1Ym1pc3Npb24sJG1kVG9hc3Qpe1xuICAgIGFuZ3VsYXIuZXh0ZW5kKHRoaXMsYXRBc3Nlc3NtZW50LmN1cnJlbnQpO1xuICAgIGF0QXNzZXNzbWVudC5sb2FkKHRoaXMuYXNzc2Vzc21lbnRJZCkuc3VjY2VzcyhmdW5jdGlvbihhc3Nlc3NtZW50KXtcbiAgICAgIHRoaXMuYXNzZXNzbWVudCA9IGF0QXNzZXNzbWVudC5jdXJyZW50XG4gICAgfSkuZXJyb3IoZnVuY3Rpb24oKXtcbiAgICAgICRtZFRvYXN0LnNob3coe1xuICAgICAgICB0ZW1wbGF0ZSA6ICc8bWQtdG9hc3Q+RXJyb3IgITwvbWQtdG9hc3Q+J1xuICAgICAgfSlcbiAgICB9KTtcbiAgICB0aGlzLnJlc2V0ID0gYXRTdWJtaXNzaW9uLnJlc2V0Q3VycmVudDtcbiAgICB0aGlzLnN1Ym1pdCA9IGF0U3VibWlzc2lvbi5zdWJtaXRDdXJyZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gYXRBc3Nlc3NtZW50RWRpdG9yKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0IDogJ0VBJyxcbiAgICAgIHNjb3BlIDoge1xuICAgICAgICBhc3Nlc3NtZW50SWQgOiAnQCdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybCA6J2Fzc2Vzc21lbnQudHBsLmh0bWwnLFxuICAgICAgY29udHJvbGxlciA6ICdhdEFzc2Vzc21lbnRDdHJsJyxcbiAgICAgIGNvbnRyb2xsZXJBcyA6ICdlZGl0b3InLFxuICAgICAgdHJhbnNjbHVkZSA6IHRydWVcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhdEFzc2Vzc21lbnRQcm92aWRlcigpe1xuXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBiYXNlVXJsIDogJ2xvY2FsaG9zdC8nXG4gICAgfTtcblxuICAgIHRoaXMuY29uZmlnID0gZnVuY3Rpb24ocGFyYW0pe1xuICAgICAgYW5ndWxhci5leHRlbmQob3B0aW9ucyxwYXJhbSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIEFzc2Vzc21lbnQoJGh0dHApe1xuICAgICAgdmFyIGFzc2Vzc21lbnQgPSB7fTtcblxuICAgICAgYXNzZXNzbWVudC5jdXJyZW50ID0ge307XG5cbiAgICAgIGFzc2Vzc21lbnQubG9hZCA9IGZ1bmN0aW9uIChhc3Nlc3NtZW50SWQpIHtcbiAgICAgICAgcmV0dXJuICRodHRwLmdldChvcHRpb25zLmJhc2VVcmwgKyBhc3Nlc3NtZW50SWQpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICBhc3Nlc3NtZW50LmN1cnJlbnQgPSBkYXRhO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBhc3Nlc3NtZW50O1xuICAgIH1cblxuICAgIHRoaXMuJGdldCA9IEFzc2Vzc21lbnQ7XG4gIH1cblxuXG4gIGFuZ3VsYXIubW9kdWxlKCdhdC5hc3Nlc3NtZW50LmVkaXRvcicsW1xuICAgICd1aS5hY2UnLFxuICAgICdhdC5hc3Nlc3NtZW50LnN1Ym1pc3Npb24nXG4gIF0pLmRpcmVjdGl2ZSgnYXRBc3Nlc3NtZW50RWRpdG9yJyxhdEFzc2Vzc21lbnRFZGl0b3IpXG4gICAgLmNvbnRyb2xsZXIoJ2F0QXNzZXNzbWVudEN0cmwnLGF0QXNzZXNzbWVudEN0cmwpXG4gICAgLnByb3ZpZGVyKCdhdEFzc2Vzc21lbnQnLGF0QXNzZXNzbWVudFByb3ZpZGVyKTtcbn0pKGFuZ3VsYXIpO1xuXG5cbiIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xuICBmdW5jdGlvbiBTdWJtaXNzaW9uUHJvdmlkZXIoKSB7XG5cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIGJhc2VVcmw6ICdsb2NhbGhvc3QvJ1xuICAgIH07XG4gICAgdGhpcy5jb25maWcgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKG9wdGlvbnMsIHBhcmFtKVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBTdWJtaXNzaW9uKGF0QXNzZXNzbWVudCwgJGh0dHAsICRtZERpYWxvZykge1xuICAgICAgdmFyIGJhc2UgPSB7XG4gICAgICAgICAgY3VycmVudDoge1xuICAgICAgICAgICAgYXNzZXNzbWVudDoge30sXG4gICAgICAgICAgICBjb2RlOiAnJyxcbiAgICAgICAgICAgIGZpbmlzaGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHJlc3VsdDoge31cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN1Ym1pc3Npb24gPSB7fTtcbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKHN1Ym1pc3Npb24sIGJhc2UpO1xuXG4gICAgICBzdWJtaXNzaW9uLnJlc2V0Q3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50ID0gYmFzZTtcbiAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LmNvZGUgPSBhdEFzc2Vzc21lbnQuY3VycmVudC5zdGFydENvZGU7XG4gICAgICB9O1xuXG4gICAgICBzdWJtaXNzaW9uLnN1Ym1pdEN1cnJlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzdWJtaXNzaW9uLnN1Ym1pdChhdEFzc2Vzc21lbnQuY3VycmVudCwgc3VibWlzc2lvbi5jdXJyZW50LmNvZGUpO1xuICAgICAgfTtcblxuICAgICAgc3VibWlzc2lvbi5zdWJtaXQgPSBmdW5jdGlvbiAoYXNzZXNzbWVudCwgc3VibWl0dGVkQ29kZSkge1xuICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdWJtaXNzaW9uUHJvZ3Jlc3NEaWFsb2cuaHRtbCcsXG4gICAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogZmFsc2UsXG4gICAgICAgICAgZXNjYXBlVG9DbG9zZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIHN1Ym1pc3Npb24uY3VycmVudCA9IHtcbiAgICAgICAgICBhc3Nlc3NtZW50OiBhc3Nlc3NtZW50LFxuICAgICAgICAgIGNvZGU6IHN1Ym1pdHRlZENvZGUsXG4gICAgICAgICAgZmluaXNoZWQ6IGZhbHNlLFxuICAgICAgICAgIHJlc3VsdDoge31cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGJvZHkgPSB7XG4gICAgICAgICAgY29kZTogc3VibWl0dGVkQ29kZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdChvcHRpb25zLmJhc2VVcmwgKyBhc3Nlc3NtZW50LmlkLCBib2R5KVxuICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQucmVzdWx0ID0gZGF0YTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRtZERpYWxvZy5oaWRlKCk7XG4gICAgICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgc3VibWlzc2lvbi5oYXNSZXN1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzdWJtaXNzaW9uLmN1cnJlbnQuYXNzZXNzbWVudCA9PT0gYXRBc3Nlc3NtZW50LmN1cnJlbnQgJiZcbiAgICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQuZmluaXNoZWQgJiZcbiAgICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQucmVzdWx0LnBhc3MgIT09IHVuZGVmaW5lZDtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBzdWJtaXNzaW9uO1xuICAgIH1cblxuICAgIHRoaXMuJGdldCA9IFN1Ym1pc3Npb247XG4gIH1cblxuICBhbmd1bGFyLm1vZHVsZSgnYXQuYXNzZXNzbWVudC5zdWJtaXNzaW9uJywgW10pXG4gICAgLnByb3ZpZGVyKCdhdFN1Ym1pc3Npb24nLCBTdWJtaXNzaW9uUHJvdmlkZXIpO1xufSkoYW5ndWxhcik7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9