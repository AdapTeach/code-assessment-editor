!function(s){s.module("at.assessment",["ngMaterial","at.assessment.editor","at.assessment.submission"])}(angular),function(s){"use strict";function t(s,t,e,n){console.log(this,s),t.load(s.assessmentId).success(function(){s.assessment=t.current}).error(function(){n.show({template:"<md-toast>Error !</md-toast>"})}),s.reset=e.resetCurrent,s.submit=e.submitCurrent}function e(){return{restrict:"EA",scope:{assessmentId:"="},templateUrl:"assessment/assessment.tpl.html",controller:"atAssessmentCtrl",transclude:!0}}function n(){function t(s){var t={};return t.current={},t.load=function(n){return s.get(e.baseUrl+n).success(function(s){t.current=s})},t}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},t.$inject=["$http"],this.$get=t}t.$inject=["$scope","atAssessment","atSubmission","$mdToast"],s.module("at.assessment.editor",["ui.ace","at.assessment.submission"]).directive("atAssessmentEditor",e).controller("atAssessmentCtrl",t).provider("atAssessment",n)}(angular),function(s){function t(){function t(t,n,r){var o={current:{assessment:{},code:"",finished:!1,result:{}}},u={};return s.extend(u,o),u.resetCurrent=function(){u.current=o,u.current.code=t.current.startCode},u.submitCurrent=function(){return u.submit(t.current,u.current.code)},u.submit=function(s,t){r.hide(),r.show({templateUrl:"submission/submissionProgressDialog.html",clickOutsideToClose:!1,escapeToClose:!1}),u.current={assessment:s,code:t,finished:!1,result:{}};var o={code:t};return n.post(e.baseUrl+s.id,o).success(function(s){u.current.result=s}).error(function(s){console.log(s)}).finally(function(){r.hide(),u.current.finished=!0})},u.hasResult=function(){return u.current.assessment===t.current&&u.current.finished&&void 0!==u.current.result&&void 0!==u.current.result.pass},u}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},t.$inject=["atAssessment","$http","$mdDialog"],this.$get=t}s.module("at.assessment.submission",[]).provider("atSubmission",t)}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiYXNzZXNzbWVudC9hc3Nlc3NtZW50LmpzIiwic3VibWlzc2lvbi9zdWJtaXNzaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFNBQUEsR0FFQSxFQUFBLE9BQUEsaUJBQ0EsYUFDQSx1QkFDQSw4QkFFQSxTQ1BBLFNBQUEsR0FDQSxZQUVBLFNBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLFFBQUEsSUFBQSxLQUFBLEdBQ0EsRUFBQSxLQUFBLEVBQUEsY0FBQSxRQUFBLFdBQ0EsRUFBQSxXQUFBLEVBQUEsVUFDQSxNQUFBLFdBQ0EsRUFBQSxNQUNBLFNBQUEsbUNBR0EsRUFBQSxNQUFBLEVBQUEsYUFDQSxFQUFBLE9BQUEsRUFBQSxjQUdBLFFBQUEsS0FDQSxPQUNBLFNBQUEsS0FDQSxPQUNBLGFBQUEsS0FFQSxZQUFBLGlDQUNBLFdBQUEsbUJBQ0EsWUFBQSxHQUlBLFFBQUEsS0FVQSxRQUFBLEdBQUEsR0FDQSxHQUFBLEtBVUEsT0FSQSxHQUFBLFdBRUEsRUFBQSxLQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsSUFBQSxFQUFBLFFBQUEsR0FBQSxRQUFBLFNBQUEsR0FDQSxFQUFBLFFBQUEsS0FJQSxFQW5CQSxHQUFBLElBQ0EsUUFBQSxhQUdBLE1BQUEsT0FBQSxTQUFBLEdBQ0EsRUFBQSxPQUFBLEVBQUEsd0JBaUJBLEtBQUEsS0FBQSxnRUFJQSxFQUFBLE9BQUEsd0JBQ0EsU0FDQSw2QkFDQSxVQUFBLHFCQUFBLEdBQ0EsV0FBQSxtQkFBQSxHQUNBLFNBQUEsZUFBQSxJQUNBLFNDOURBLFNBQUEsR0FDQSxRQUFBLEtBU0EsUUFBQSxHQUFBLEVBQUEsRUFBQSxHQUNBLEdBQUEsSUFDQSxTQUNBLGNBQ0EsS0FBQSxHQUNBLFVBQUEsRUFDQSxZQUdBLElBZ0RBLE9BL0NBLEdBQUEsT0FBQSxFQUFBLEdBRUEsRUFBQSxhQUFBLFdBQ0EsRUFBQSxRQUFBLEVBQ0EsRUFBQSxRQUFBLEtBQUEsRUFBQSxRQUFBLFdBR0EsRUFBQSxjQUFBLFdBQ0EsTUFBQSxHQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxPQUdBLEVBQUEsT0FBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLE9BQ0EsRUFBQSxNQUNBLFlBQUEsMkNBQ0EscUJBQUEsRUFDQSxlQUFBLElBRUEsRUFBQSxTQUNBLFdBQUEsRUFDQSxLQUFBLEVBQ0EsVUFBQSxFQUNBLFVBRUEsSUFBQSxJQUNBLEtBQUEsRUFFQSxPQUFBLEdBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxHQUFBLEdBQ0EsUUFBQSxTQUFBLEdBQ0EsRUFBQSxRQUFBLE9BQUEsSUFFQSxNQUFBLFNBQUEsR0FDQSxRQUFBLElBQUEsS0FFQSxRQUFBLFdBQ0EsRUFBQSxPQUNBLEVBQUEsUUFBQSxVQUFBLEtBSUEsRUFBQSxVQUFBLFdBQ0EsTUFBQSxHQUFBLFFBQUEsYUFBQSxFQUFBLFNBQ0EsRUFBQSxRQUFBLFVBQ0EsU0FBQSxFQUFBLFFBQUEsUUFDQSxTQUFBLEVBQUEsUUFBQSxPQUFBLE1BR0EsRUFoRUEsR0FBQSxJQUNBLFFBQUEsYUFFQSxNQUFBLE9BQUEsU0FBQSxHQUNBLEVBQUEsT0FBQSxFQUFBLG1EQStEQSxLQUFBLEtBQUEsRUFHQSxFQUFBLE9BQUEsK0JBQ0EsU0FBQSxlQUFBLElBQ0EiLCJmaWxlIjoiYXQtY29kZS1hc3Nlc3NtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKGFuZ3VsYXIpe1xuXG4gIGFuZ3VsYXIubW9kdWxlKCdhdC5hc3Nlc3NtZW50JyxbXG4gICAgJ25nTWF0ZXJpYWwnLFxuICAgICdhdC5hc3Nlc3NtZW50LmVkaXRvcicsXG4gICAgJ2F0LmFzc2Vzc21lbnQuc3VibWlzc2lvbidcbiAgXSlcbn0pKGFuZ3VsYXIpOyIsIihmdW5jdGlvbihhbmd1bGFyKXtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIGF0QXNzZXNzbWVudEN0cmwoJHNjb3BlLGF0QXNzZXNzbWVudCxhdFN1Ym1pc3Npb24sJG1kVG9hc3Qpe1xuICAgIGNvbnNvbGUubG9nKHRoaXMsJHNjb3BlKTtcbiAgICBhdEFzc2Vzc21lbnQubG9hZCgkc2NvcGUuYXNzZXNzbWVudElkKS5zdWNjZXNzKGZ1bmN0aW9uKCl7XG4gICAgICAkc2NvcGUuYXNzZXNzbWVudCA9IGF0QXNzZXNzbWVudC5jdXJyZW50XG4gICAgfSkuZXJyb3IoZnVuY3Rpb24oKXtcbiAgICAgICRtZFRvYXN0LnNob3coe1xuICAgICAgICB0ZW1wbGF0ZSA6ICc8bWQtdG9hc3Q+RXJyb3IgITwvbWQtdG9hc3Q+J1xuICAgICAgfSlcbiAgICB9KTtcbiAgICAkc2NvcGUucmVzZXQgPSBhdFN1Ym1pc3Npb24ucmVzZXRDdXJyZW50O1xuICAgICRzY29wZS5zdWJtaXQgPSBhdFN1Ym1pc3Npb24uc3VibWl0Q3VycmVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0QXNzZXNzbWVudEVkaXRvcigpe1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdCA6ICdFQScsXG4gICAgICBzY29wZSA6IHtcbiAgICAgICAgYXNzZXNzbWVudElkIDogJz0nXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmwgOidhc3Nlc3NtZW50L2Fzc2Vzc21lbnQudHBsLmh0bWwnLFxuICAgICAgY29udHJvbGxlciA6ICdhdEFzc2Vzc21lbnRDdHJsJyxcbiAgICAgIHRyYW5zY2x1ZGUgOiB0cnVlXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXRBc3Nlc3NtZW50UHJvdmlkZXIoKXtcblxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgYmFzZVVybCA6ICdsb2NhbGhvc3QvJ1xuICAgIH07XG5cbiAgICB0aGlzLmNvbmZpZyA9IGZ1bmN0aW9uKHBhcmFtKXtcbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKG9wdGlvbnMscGFyYW0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBBc3Nlc3NtZW50KCRodHRwKXtcbiAgICAgIHZhciBhc3Nlc3NtZW50ID0ge307XG5cbiAgICAgIGFzc2Vzc21lbnQuY3VycmVudCA9IHt9O1xuXG4gICAgICBhc3Nlc3NtZW50LmxvYWQgPSBmdW5jdGlvbiAoYXNzZXNzbWVudElkKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQob3B0aW9ucy5iYXNlVXJsICsgYXNzZXNzbWVudElkKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgYXNzZXNzbWVudC5jdXJyZW50ID0gZGF0YTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gYXNzZXNzbWVudDtcbiAgICB9XG5cbiAgICB0aGlzLiRnZXQgPSBBc3Nlc3NtZW50O1xuICB9XG5cblxuICBhbmd1bGFyLm1vZHVsZSgnYXQuYXNzZXNzbWVudC5lZGl0b3InLFtcbiAgICAndWkuYWNlJyxcbiAgICAnYXQuYXNzZXNzbWVudC5zdWJtaXNzaW9uJ1xuICBdKS5kaXJlY3RpdmUoJ2F0QXNzZXNzbWVudEVkaXRvcicsYXRBc3Nlc3NtZW50RWRpdG9yKVxuICAgIC5jb250cm9sbGVyKCdhdEFzc2Vzc21lbnRDdHJsJyxhdEFzc2Vzc21lbnRDdHJsKVxuICAgIC5wcm92aWRlcignYXRBc3Nlc3NtZW50JyxhdEFzc2Vzc21lbnRQcm92aWRlcik7XG59KShhbmd1bGFyKTtcblxuXG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgZnVuY3Rpb24gU3VibWlzc2lvblByb3ZpZGVyKCkge1xuXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBiYXNlVXJsOiAnbG9jYWxob3N0LydcbiAgICB9O1xuICAgIHRoaXMuY29uZmlnID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICBhbmd1bGFyLmV4dGVuZChvcHRpb25zLCBwYXJhbSlcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gU3VibWlzc2lvbihhdEFzc2Vzc21lbnQsICRodHRwLCAkbWREaWFsb2cpIHtcbiAgICAgIHZhciBiYXNlID0ge1xuICAgICAgICAgIGN1cnJlbnQ6IHtcbiAgICAgICAgICAgIGFzc2Vzc21lbnQ6IHt9LFxuICAgICAgICAgICAgY29kZTogJycsXG4gICAgICAgICAgICBmaW5pc2hlZDogZmFsc2UsXG4gICAgICAgICAgICByZXN1bHQ6IHt9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdWJtaXNzaW9uID0ge307XG4gICAgICBhbmd1bGFyLmV4dGVuZChzdWJtaXNzaW9uLCBiYXNlKTtcblxuICAgICAgc3VibWlzc2lvbi5yZXNldEN1cnJlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN1Ym1pc3Npb24uY3VycmVudCA9IGJhc2U7XG4gICAgICAgIHN1Ym1pc3Npb24uY3VycmVudC5jb2RlID0gYXRBc3Nlc3NtZW50LmN1cnJlbnQuc3RhcnRDb2RlO1xuICAgICAgfTtcblxuICAgICAgc3VibWlzc2lvbi5zdWJtaXRDdXJyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc3VibWlzc2lvbi5zdWJtaXQoYXRBc3Nlc3NtZW50LmN1cnJlbnQsIHN1Ym1pc3Npb24uY3VycmVudC5jb2RlKTtcbiAgICAgIH07XG5cbiAgICAgIHN1Ym1pc3Npb24uc3VibWl0ID0gZnVuY3Rpb24gKGFzc2Vzc21lbnQsIHN1Ym1pdHRlZENvZGUpIHtcbiAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAgICAgICAgJG1kRGlhbG9nLnNob3coe1xuICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3VibWlzc2lvbi9zdWJtaXNzaW9uUHJvZ3Jlc3NEaWFsb2cuaHRtbCcsXG4gICAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogZmFsc2UsXG4gICAgICAgICAgZXNjYXBlVG9DbG9zZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIHN1Ym1pc3Npb24uY3VycmVudCA9IHtcbiAgICAgICAgICBhc3Nlc3NtZW50OiBhc3Nlc3NtZW50LFxuICAgICAgICAgIGNvZGU6IHN1Ym1pdHRlZENvZGUsXG4gICAgICAgICAgZmluaXNoZWQ6IGZhbHNlLFxuICAgICAgICAgIHJlc3VsdDoge31cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGJvZHkgPSB7XG4gICAgICAgICAgY29kZTogc3VibWl0dGVkQ29kZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdChvcHRpb25zLmJhc2VVcmwgKyBhc3Nlc3NtZW50LmlkLCBib2R5KVxuICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQucmVzdWx0ID0gZGF0YTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRtZERpYWxvZy5oaWRlKCk7XG4gICAgICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgc3VibWlzc2lvbi5oYXNSZXN1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzdWJtaXNzaW9uLmN1cnJlbnQuYXNzZXNzbWVudCA9PT0gYXRBc3Nlc3NtZW50LmN1cnJlbnQgJiZcbiAgICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQuZmluaXNoZWQgJiZcbiAgICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQucmVzdWx0LnBhc3MgIT09IHVuZGVmaW5lZDtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBzdWJtaXNzaW9uO1xuICAgIH1cblxuICAgIHRoaXMuJGdldCA9IFN1Ym1pc3Npb247XG4gIH1cblxuICBhbmd1bGFyLm1vZHVsZSgnYXQuYXNzZXNzbWVudC5zdWJtaXNzaW9uJywgW10pXG4gICAgLnByb3ZpZGVyKCdhdFN1Ym1pc3Npb24nLCBTdWJtaXNzaW9uUHJvdmlkZXIpO1xufSkoYW5ndWxhcik7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9