!function(s){s.module("at.assessment",["ngMaterial","at.assessment.editor","at.assessment.submission"])}(angular),function(s){"use strict";function t(s,t,e,n){console.log(this,s),t.load(s.assessmentId).success(function(){s.assessment=t.current}).error(function(){n.show({template:"<md-toast>Error !</md-toast>"})}),s.reset=e.resetCurrent,s.submit=e.submitCurrent}function e(){return{restrict:"EA",scope:{assessmentId:"="},templateUrl:"assessment.tpl.html",controller:"atAssessmentCtrl",transclude:!0}}function n(){function t(s){var t={};return t.current={},t.load=function(n){return s.get(e.baseUrl+n).success(function(s){t.current=s})},t}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},t.$inject=["$http"],this.$get=t}t.$inject=["$scope","atAssessment","atSubmission","$mdToast"],s.module("at.assessment.editor",["ui.ace","at.assessment.submission"]).directive("atAssessmentEditor",e).controller("atAssessmentCtrl",t).provider("atAssessment",n)}(angular),function(s){function t(){function t(t,n,r){var o={current:{assessment:{},code:"",finished:!1,result:{}}},u={};return s.extend(u,o),u.resetCurrent=function(){u.current=o,u.current.code=t.current.startCode},u.submitCurrent=function(){return u.submit(t.current,u.current.code)},u.submit=function(s,t){r.hide(),r.show({templateUrl:"submissionProgressDialog.html",clickOutsideToClose:!1,escapeToClose:!1}),u.current={assessment:s,code:t,finished:!1,result:{}};var o={code:t};return n.post(e.baseUrl+s.id,o).success(function(s){u.current.result=s}).error(function(s){console.log(s)}).finally(function(){r.hide(),u.current.finished=!0})},u.hasResult=function(){return u.current.assessment===t.current&&u.current.finished&&void 0!==u.current.result&&void 0!==u.current.result.pass},u}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},t.$inject=["atAssessment","$http","$mdDialog"],this.$get=t}s.module("at.assessment.submission",[]).provider("atSubmission",t)}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiYXNzZXNzbWVudC9hc3Nlc3NtZW50LmpzIiwic3VibWlzc2lvbi9zdWJtaXNzaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFNBQUEsR0FFQSxFQUFBLE9BQUEsaUJBQ0EsYUFDQSx1QkFDQSw4QkFFQSxTQ1BBLFNBQUEsR0FDQSxZQUVBLFNBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLFFBQUEsSUFBQSxLQUFBLEdBQ0EsRUFBQSxLQUFBLEVBQUEsY0FBQSxRQUFBLFdBQ0EsRUFBQSxXQUFBLEVBQUEsVUFDQSxNQUFBLFdBQ0EsRUFBQSxNQUNBLFNBQUEsbUNBR0EsRUFBQSxNQUFBLEVBQUEsYUFDQSxFQUFBLE9BQUEsRUFBQSxjQUdBLFFBQUEsS0FDQSxPQUNBLFNBQUEsS0FDQSxPQUNBLGFBQUEsS0FFQSxZQUFBLHNCQUNBLFdBQUEsbUJBQ0EsWUFBQSxHQUlBLFFBQUEsS0FVQSxRQUFBLEdBQUEsR0FDQSxHQUFBLEtBVUEsT0FSQSxHQUFBLFdBRUEsRUFBQSxLQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsSUFBQSxFQUFBLFFBQUEsR0FBQSxRQUFBLFNBQUEsR0FDQSxFQUFBLFFBQUEsS0FJQSxFQW5CQSxHQUFBLElBQ0EsUUFBQSxhQUdBLE1BQUEsT0FBQSxTQUFBLEdBQ0EsRUFBQSxPQUFBLEVBQUEsd0JBaUJBLEtBQUEsS0FBQSxnRUFJQSxFQUFBLE9BQUEsd0JBQ0EsU0FDQSw2QkFDQSxVQUFBLHFCQUFBLEdBQ0EsV0FBQSxtQkFBQSxHQUNBLFNBQUEsZUFBQSxJQUNBLFNDOURBLFNBQUEsR0FDQSxRQUFBLEtBU0EsUUFBQSxHQUFBLEVBQUEsRUFBQSxHQUNBLEdBQUEsSUFDQSxTQUNBLGNBQ0EsS0FBQSxHQUNBLFVBQUEsRUFDQSxZQUdBLElBZ0RBLE9BL0NBLEdBQUEsT0FBQSxFQUFBLEdBRUEsRUFBQSxhQUFBLFdBQ0EsRUFBQSxRQUFBLEVBQ0EsRUFBQSxRQUFBLEtBQUEsRUFBQSxRQUFBLFdBR0EsRUFBQSxjQUFBLFdBQ0EsTUFBQSxHQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxPQUdBLEVBQUEsT0FBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLE9BQ0EsRUFBQSxNQUNBLFlBQUEsZ0NBQ0EscUJBQUEsRUFDQSxlQUFBLElBRUEsRUFBQSxTQUNBLFdBQUEsRUFDQSxLQUFBLEVBQ0EsVUFBQSxFQUNBLFVBRUEsSUFBQSxJQUNBLEtBQUEsRUFFQSxPQUFBLEdBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxHQUFBLEdBQ0EsUUFBQSxTQUFBLEdBQ0EsRUFBQSxRQUFBLE9BQUEsSUFFQSxNQUFBLFNBQUEsR0FDQSxRQUFBLElBQUEsS0FFQSxRQUFBLFdBQ0EsRUFBQSxPQUNBLEVBQUEsUUFBQSxVQUFBLEtBSUEsRUFBQSxVQUFBLFdBQ0EsTUFBQSxHQUFBLFFBQUEsYUFBQSxFQUFBLFNBQ0EsRUFBQSxRQUFBLFVBQ0EsU0FBQSxFQUFBLFFBQUEsUUFDQSxTQUFBLEVBQUEsUUFBQSxPQUFBLE1BR0EsRUFoRUEsR0FBQSxJQUNBLFFBQUEsYUFFQSxNQUFBLE9BQUEsU0FBQSxHQUNBLEVBQUEsT0FBQSxFQUFBLG1EQStEQSxLQUFBLEtBQUEsRUFHQSxFQUFBLE9BQUEsK0JBQ0EsU0FBQSxlQUFBLElBQ0EiLCJmaWxlIjoiYXQtY29kZS1hc3Nlc3NtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKGFuZ3VsYXIpe1xuXG4gIGFuZ3VsYXIubW9kdWxlKCdhdC5hc3Nlc3NtZW50JyxbXG4gICAgJ25nTWF0ZXJpYWwnLFxuICAgICdhdC5hc3Nlc3NtZW50LmVkaXRvcicsXG4gICAgJ2F0LmFzc2Vzc21lbnQuc3VibWlzc2lvbidcbiAgXSlcbn0pKGFuZ3VsYXIpOyIsIihmdW5jdGlvbihhbmd1bGFyKXtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIGF0QXNzZXNzbWVudEN0cmwoJHNjb3BlLGF0QXNzZXNzbWVudCxhdFN1Ym1pc3Npb24sJG1kVG9hc3Qpe1xuICAgIGNvbnNvbGUubG9nKHRoaXMsJHNjb3BlKTtcbiAgICBhdEFzc2Vzc21lbnQubG9hZCgkc2NvcGUuYXNzZXNzbWVudElkKS5zdWNjZXNzKGZ1bmN0aW9uKCl7XG4gICAgICAkc2NvcGUuYXNzZXNzbWVudCA9IGF0QXNzZXNzbWVudC5jdXJyZW50XG4gICAgfSkuZXJyb3IoZnVuY3Rpb24oKXtcbiAgICAgICRtZFRvYXN0LnNob3coe1xuICAgICAgICB0ZW1wbGF0ZSA6ICc8bWQtdG9hc3Q+RXJyb3IgITwvbWQtdG9hc3Q+J1xuICAgICAgfSlcbiAgICB9KTtcbiAgICAkc2NvcGUucmVzZXQgPSBhdFN1Ym1pc3Npb24ucmVzZXRDdXJyZW50O1xuICAgICRzY29wZS5zdWJtaXQgPSBhdFN1Ym1pc3Npb24uc3VibWl0Q3VycmVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0QXNzZXNzbWVudEVkaXRvcigpe1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdCA6ICdFQScsXG4gICAgICBzY29wZSA6IHtcbiAgICAgICAgYXNzZXNzbWVudElkIDogJz0nXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmwgOidhc3Nlc3NtZW50LnRwbC5odG1sJyxcbiAgICAgIGNvbnRyb2xsZXIgOiAnYXRBc3Nlc3NtZW50Q3RybCcsXG4gICAgICB0cmFuc2NsdWRlIDogdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGF0QXNzZXNzbWVudFByb3ZpZGVyKCl7XG5cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIGJhc2VVcmwgOiAnbG9jYWxob3N0LydcbiAgICB9O1xuXG4gICAgdGhpcy5jb25maWcgPSBmdW5jdGlvbihwYXJhbSl7XG4gICAgICBhbmd1bGFyLmV4dGVuZChvcHRpb25zLHBhcmFtKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQXNzZXNzbWVudCgkaHR0cCl7XG4gICAgICB2YXIgYXNzZXNzbWVudCA9IHt9O1xuXG4gICAgICBhc3Nlc3NtZW50LmN1cnJlbnQgPSB7fTtcblxuICAgICAgYXNzZXNzbWVudC5sb2FkID0gZnVuY3Rpb24gKGFzc2Vzc21lbnRJZCkge1xuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KG9wdGlvbnMuYmFzZVVybCArIGFzc2Vzc21lbnRJZCkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGFzc2Vzc21lbnQuY3VycmVudCA9IGRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGFzc2Vzc21lbnQ7XG4gICAgfVxuXG4gICAgdGhpcy4kZ2V0ID0gQXNzZXNzbWVudDtcbiAgfVxuXG5cbiAgYW5ndWxhci5tb2R1bGUoJ2F0LmFzc2Vzc21lbnQuZWRpdG9yJyxbXG4gICAgJ3VpLmFjZScsXG4gICAgJ2F0LmFzc2Vzc21lbnQuc3VibWlzc2lvbidcbiAgXSkuZGlyZWN0aXZlKCdhdEFzc2Vzc21lbnRFZGl0b3InLGF0QXNzZXNzbWVudEVkaXRvcilcbiAgICAuY29udHJvbGxlcignYXRBc3Nlc3NtZW50Q3RybCcsYXRBc3Nlc3NtZW50Q3RybClcbiAgICAucHJvdmlkZXIoJ2F0QXNzZXNzbWVudCcsYXRBc3Nlc3NtZW50UHJvdmlkZXIpO1xufSkoYW5ndWxhcik7XG5cblxuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gIGZ1bmN0aW9uIFN1Ym1pc3Npb25Qcm92aWRlcigpIHtcblxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgYmFzZVVybDogJ2xvY2FsaG9zdC8nXG4gICAgfTtcbiAgICB0aGlzLmNvbmZpZyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgYW5ndWxhci5leHRlbmQob3B0aW9ucywgcGFyYW0pXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFN1Ym1pc3Npb24oYXRBc3Nlc3NtZW50LCAkaHR0cCwgJG1kRGlhbG9nKSB7XG4gICAgICB2YXIgYmFzZSA9IHtcbiAgICAgICAgICBjdXJyZW50OiB7XG4gICAgICAgICAgICBhc3Nlc3NtZW50OiB7fSxcbiAgICAgICAgICAgIGNvZGU6ICcnLFxuICAgICAgICAgICAgZmluaXNoZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcmVzdWx0OiB7fVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3VibWlzc2lvbiA9IHt9O1xuICAgICAgYW5ndWxhci5leHRlbmQoc3VibWlzc2lvbiwgYmFzZSk7XG5cbiAgICAgIHN1Ym1pc3Npb24ucmVzZXRDdXJyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQgPSBiYXNlO1xuICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQuY29kZSA9IGF0QXNzZXNzbWVudC5jdXJyZW50LnN0YXJ0Q29kZTtcbiAgICAgIH07XG5cbiAgICAgIHN1Ym1pc3Npb24uc3VibWl0Q3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHN1Ym1pc3Npb24uc3VibWl0KGF0QXNzZXNzbWVudC5jdXJyZW50LCBzdWJtaXNzaW9uLmN1cnJlbnQuY29kZSk7XG4gICAgICB9O1xuXG4gICAgICBzdWJtaXNzaW9uLnN1Ym1pdCA9IGZ1bmN0aW9uIChhc3Nlc3NtZW50LCBzdWJtaXR0ZWRDb2RlKSB7XG4gICAgICAgICRtZERpYWxvZy5oaWRlKCk7XG4gICAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N1Ym1pc3Npb25Qcm9ncmVzc0RpYWxvZy5odG1sJyxcbiAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiBmYWxzZSxcbiAgICAgICAgICBlc2NhcGVUb0Nsb3NlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50ID0ge1xuICAgICAgICAgIGFzc2Vzc21lbnQ6IGFzc2Vzc21lbnQsXG4gICAgICAgICAgY29kZTogc3VibWl0dGVkQ29kZSxcbiAgICAgICAgICBmaW5pc2hlZDogZmFsc2UsXG4gICAgICAgICAgcmVzdWx0OiB7fVxuICAgICAgICB9O1xuICAgICAgICB2YXIgYm9keSA9IHtcbiAgICAgICAgICBjb2RlOiBzdWJtaXR0ZWRDb2RlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KG9wdGlvbnMuYmFzZVVybCArIGFzc2Vzc21lbnQuaWQsIGJvZHkpXG4gICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHN1Ym1pc3Npb24uY3VycmVudC5yZXN1bHQgPSBkYXRhO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAgICAgICAgICAgIHN1Ym1pc3Npb24uY3VycmVudC5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBzdWJtaXNzaW9uLmhhc1Jlc3VsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHN1Ym1pc3Npb24uY3VycmVudC5hc3Nlc3NtZW50ID09PSBhdEFzc2Vzc21lbnQuY3VycmVudCAmJlxuICAgICAgICAgIHN1Ym1pc3Npb24uY3VycmVudC5maW5pc2hlZCAmJlxuICAgICAgICAgIHN1Ym1pc3Npb24uY3VycmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgIHN1Ym1pc3Npb24uY3VycmVudC5yZXN1bHQucGFzcyAhPT0gdW5kZWZpbmVkO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHN1Ym1pc3Npb247XG4gICAgfVxuXG4gICAgdGhpcy4kZ2V0ID0gU3VibWlzc2lvbjtcbiAgfVxuXG4gIGFuZ3VsYXIubW9kdWxlKCdhdC5hc3Nlc3NtZW50LnN1Ym1pc3Npb24nLCBbXSlcbiAgICAucHJvdmlkZXIoJ2F0U3VibWlzc2lvbicsIFN1Ym1pc3Npb25Qcm92aWRlcik7XG59KShhbmd1bGFyKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=