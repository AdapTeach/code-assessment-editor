!function(s){s.module("at.assessment",["ngMaterial","at.assessment.editor","at.assessment.submission"])}(angular),function(s){"use strict";function t(s,t,e,n){console.log(this,s),t.load(this.asssessmentId).success(function(){this.assessment=t.current}).error(function(){n.show({template:"<md-toast>Error !</md-toast>"})}),this.reset=e.resetCurrent,this.submit=e.submitCurrent}function e(){return{restrict:"EA",scope:{assessmentId:"@"},templateUrl:"assessment.tpl.html",controller:"atAssessmentCtrl",controllerAs:"editor",transclude:!0}}function n(){function t(s){var t={};return t.current={},t.load=function(n){return s.get(e.baseUrl+n).success(function(s){t.current=s})},t}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},t.$inject=["$http"],this.$get=t}t.$inject=["$scope","atAssessment","atSubmission","$mdToast"],s.module("at.assessment.editor",["ui.ace","at.assessment.submission"]).directive("atAssessmentEditor",e).controller("atAssessmentCtrl",t).provider("atAssessment",n)}(angular),function(s){function t(){function t(t,n,r){var i={current:{assessment:{},code:"",finished:!1,result:{}}},o={};return s.extend(o,i),o.resetCurrent=function(){o.current=i,o.current.code=t.current.startCode},o.submitCurrent=function(){return o.submit(t.current,o.current.code)},o.submit=function(s,t){r.hide(),r.show({templateUrl:"submissionProgressDialog.html",clickOutsideToClose:!1,escapeToClose:!1}),o.current={assessment:s,code:t,finished:!1,result:{}};var i={code:t};return n.post(e.baseUrl+s.id,i).success(function(s){o.current.result=s}).error(function(s){console.log(s)}).finally(function(){r.hide(),o.current.finished=!0})},o.hasResult=function(){return o.current.assessment===t.current&&o.current.finished&&void 0!==o.current.result&&void 0!==o.current.result.pass},o}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},t.$inject=["atAssessment","$http","$mdDialog"],this.$get=t}s.module("at.assessment.submission",[]).provider("atSubmission",t)}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiYXNzZXNzbWVudC9hc3Nlc3NtZW50LmpzIiwic3VibWlzc2lvbi9zdWJtaXNzaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFNBQUEsR0FFQSxFQUFBLE9BQUEsaUJBQ0EsYUFDQSx1QkFDQSw4QkFFQSxTQ1BBLFNBQUEsR0FDQSxZQUVBLFNBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLFFBQUEsSUFBQSxLQUFBLEdBQ0EsRUFBQSxLQUFBLEtBQUEsZUFBQSxRQUFBLFdBQ0EsS0FBQSxXQUFBLEVBQUEsVUFDQSxNQUFBLFdBQ0EsRUFBQSxNQUNBLFNBQUEsbUNBR0EsS0FBQSxNQUFBLEVBQUEsYUFDQSxLQUFBLE9BQUEsRUFBQSxjQUdBLFFBQUEsS0FDQSxPQUNBLFNBQUEsS0FDQSxPQUNBLGFBQUEsS0FFQSxZQUFBLHNCQUNBLFdBQUEsbUJBQ0EsYUFBQSxTQUNBLFlBQUEsR0FJQSxRQUFBLEtBVUEsUUFBQSxHQUFBLEdBQ0EsR0FBQSxLQVVBLE9BUkEsR0FBQSxXQUVBLEVBQUEsS0FBQSxTQUFBLEdBQ0EsTUFBQSxHQUFBLElBQUEsRUFBQSxRQUFBLEdBQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxRQUFBLEtBSUEsRUFuQkEsR0FBQSxJQUNBLFFBQUEsYUFHQSxNQUFBLE9BQUEsU0FBQSxHQUNBLEVBQUEsT0FBQSxFQUFBLHdCQWlCQSxLQUFBLEtBQUEsZ0VBSUEsRUFBQSxPQUFBLHdCQUNBLFNBQ0EsNkJBQ0EsVUFBQSxxQkFBQSxHQUNBLFdBQUEsbUJBQUEsR0FDQSxTQUFBLGVBQUEsSUFDQSxTQy9EQSxTQUFBLEdBQ0EsUUFBQSxLQVNBLFFBQUEsR0FBQSxFQUFBLEVBQUEsR0FDQSxHQUFBLElBQ0EsU0FDQSxjQUNBLEtBQUEsR0FDQSxVQUFBLEVBQ0EsWUFHQSxJQWdEQSxPQS9DQSxHQUFBLE9BQUEsRUFBQSxHQUVBLEVBQUEsYUFBQSxXQUNBLEVBQUEsUUFBQSxFQUNBLEVBQUEsUUFBQSxLQUFBLEVBQUEsUUFBQSxXQUdBLEVBQUEsY0FBQSxXQUNBLE1BQUEsR0FBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsT0FHQSxFQUFBLE9BQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxPQUNBLEVBQUEsTUFDQSxZQUFBLGdDQUNBLHFCQUFBLEVBQ0EsZUFBQSxJQUVBLEVBQUEsU0FDQSxXQUFBLEVBQ0EsS0FBQSxFQUNBLFVBQUEsRUFDQSxVQUVBLElBQUEsSUFDQSxLQUFBLEVBRUEsT0FBQSxHQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsR0FBQSxHQUNBLFFBQUEsU0FBQSxHQUNBLEVBQUEsUUFBQSxPQUFBLElBRUEsTUFBQSxTQUFBLEdBQ0EsUUFBQSxJQUFBLEtBRUEsUUFBQSxXQUNBLEVBQUEsT0FDQSxFQUFBLFFBQUEsVUFBQSxLQUlBLEVBQUEsVUFBQSxXQUNBLE1BQUEsR0FBQSxRQUFBLGFBQUEsRUFBQSxTQUNBLEVBQUEsUUFBQSxVQUNBLFNBQUEsRUFBQSxRQUFBLFFBQ0EsU0FBQSxFQUFBLFFBQUEsT0FBQSxNQUdBLEVBaEVBLEdBQUEsSUFDQSxRQUFBLGFBRUEsTUFBQSxPQUFBLFNBQUEsR0FDQSxFQUFBLE9BQUEsRUFBQSxtREErREEsS0FBQSxLQUFBLEVBR0EsRUFBQSxPQUFBLCtCQUNBLFNBQUEsZUFBQSxJQUNBIiwiZmlsZSI6ImF0LWNvZGUtYXNzZXNzbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihhbmd1bGFyKXtcblxuICBhbmd1bGFyLm1vZHVsZSgnYXQuYXNzZXNzbWVudCcsW1xuICAgICduZ01hdGVyaWFsJyxcbiAgICAnYXQuYXNzZXNzbWVudC5lZGl0b3InLFxuICAgICdhdC5hc3Nlc3NtZW50LnN1Ym1pc3Npb24nXG4gIF0pXG59KShhbmd1bGFyKTsiLCIoZnVuY3Rpb24oYW5ndWxhcil7XG4gICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBhdEFzc2Vzc21lbnRDdHJsKCRzY29wZSxhdEFzc2Vzc21lbnQsYXRTdWJtaXNzaW9uLCRtZFRvYXN0KXtcbiAgICBjb25zb2xlLmxvZyh0aGlzLCRzY29wZSk7XG4gICAgYXRBc3Nlc3NtZW50LmxvYWQodGhpcy5hc3NzZXNzbWVudElkKS5zdWNjZXNzKGZ1bmN0aW9uKGFzc2Vzc21lbnQpe1xuICAgICAgdGhpcy5hc3Nlc3NtZW50ID0gYXRBc3Nlc3NtZW50LmN1cnJlbnRcbiAgICB9KS5lcnJvcihmdW5jdGlvbigpe1xuICAgICAgJG1kVG9hc3Quc2hvdyh7XG4gICAgICAgIHRlbXBsYXRlIDogJzxtZC10b2FzdD5FcnJvciAhPC9tZC10b2FzdD4nXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHRoaXMucmVzZXQgPSBhdFN1Ym1pc3Npb24ucmVzZXRDdXJyZW50O1xuICAgIHRoaXMuc3VibWl0ID0gYXRTdWJtaXNzaW9uLnN1Ym1pdEN1cnJlbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBhdEFzc2Vzc21lbnRFZGl0b3IoKXtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3QgOiAnRUEnLFxuICAgICAgc2NvcGUgOiB7XG4gICAgICAgIGFzc2Vzc21lbnRJZCA6ICdAJ1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsIDonYXNzZXNzbWVudC50cGwuaHRtbCcsXG4gICAgICBjb250cm9sbGVyIDogJ2F0QXNzZXNzbWVudEN0cmwnLFxuICAgICAgY29udHJvbGxlckFzIDogJ2VkaXRvcicsXG4gICAgICB0cmFuc2NsdWRlIDogdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGF0QXNzZXNzbWVudFByb3ZpZGVyKCl7XG5cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIGJhc2VVcmwgOiAnbG9jYWxob3N0LydcbiAgICB9O1xuXG4gICAgdGhpcy5jb25maWcgPSBmdW5jdGlvbihwYXJhbSl7XG4gICAgICBhbmd1bGFyLmV4dGVuZChvcHRpb25zLHBhcmFtKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQXNzZXNzbWVudCgkaHR0cCl7XG4gICAgICB2YXIgYXNzZXNzbWVudCA9IHt9O1xuXG4gICAgICBhc3Nlc3NtZW50LmN1cnJlbnQgPSB7fTtcblxuICAgICAgYXNzZXNzbWVudC5sb2FkID0gZnVuY3Rpb24gKGFzc2Vzc21lbnRJZCkge1xuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KG9wdGlvbnMuYmFzZVVybCArIGFzc2Vzc21lbnRJZCkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGFzc2Vzc21lbnQuY3VycmVudCA9IGRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGFzc2Vzc21lbnQ7XG4gICAgfVxuXG4gICAgdGhpcy4kZ2V0ID0gQXNzZXNzbWVudDtcbiAgfVxuXG5cbiAgYW5ndWxhci5tb2R1bGUoJ2F0LmFzc2Vzc21lbnQuZWRpdG9yJyxbXG4gICAgJ3VpLmFjZScsXG4gICAgJ2F0LmFzc2Vzc21lbnQuc3VibWlzc2lvbidcbiAgXSkuZGlyZWN0aXZlKCdhdEFzc2Vzc21lbnRFZGl0b3InLGF0QXNzZXNzbWVudEVkaXRvcilcbiAgICAuY29udHJvbGxlcignYXRBc3Nlc3NtZW50Q3RybCcsYXRBc3Nlc3NtZW50Q3RybClcbiAgICAucHJvdmlkZXIoJ2F0QXNzZXNzbWVudCcsYXRBc3Nlc3NtZW50UHJvdmlkZXIpO1xufSkoYW5ndWxhcik7XG5cblxuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gIGZ1bmN0aW9uIFN1Ym1pc3Npb25Qcm92aWRlcigpIHtcblxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgYmFzZVVybDogJ2xvY2FsaG9zdC8nXG4gICAgfTtcbiAgICB0aGlzLmNvbmZpZyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgYW5ndWxhci5leHRlbmQob3B0aW9ucywgcGFyYW0pXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFN1Ym1pc3Npb24oYXRBc3Nlc3NtZW50LCAkaHR0cCwgJG1kRGlhbG9nKSB7XG4gICAgICB2YXIgYmFzZSA9IHtcbiAgICAgICAgICBjdXJyZW50OiB7XG4gICAgICAgICAgICBhc3Nlc3NtZW50OiB7fSxcbiAgICAgICAgICAgIGNvZGU6ICcnLFxuICAgICAgICAgICAgZmluaXNoZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcmVzdWx0OiB7fVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3VibWlzc2lvbiA9IHt9O1xuICAgICAgYW5ndWxhci5leHRlbmQoc3VibWlzc2lvbiwgYmFzZSk7XG5cbiAgICAgIHN1Ym1pc3Npb24ucmVzZXRDdXJyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQgPSBiYXNlO1xuICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQuY29kZSA9IGF0QXNzZXNzbWVudC5jdXJyZW50LnN0YXJ0Q29kZTtcbiAgICAgIH07XG5cbiAgICAgIHN1Ym1pc3Npb24uc3VibWl0Q3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHN1Ym1pc3Npb24uc3VibWl0KGF0QXNzZXNzbWVudC5jdXJyZW50LCBzdWJtaXNzaW9uLmN1cnJlbnQuY29kZSk7XG4gICAgICB9O1xuXG4gICAgICBzdWJtaXNzaW9uLnN1Ym1pdCA9IGZ1bmN0aW9uIChhc3Nlc3NtZW50LCBzdWJtaXR0ZWRDb2RlKSB7XG4gICAgICAgICRtZERpYWxvZy5oaWRlKCk7XG4gICAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N1Ym1pc3Npb25Qcm9ncmVzc0RpYWxvZy5odG1sJyxcbiAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiBmYWxzZSxcbiAgICAgICAgICBlc2NhcGVUb0Nsb3NlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50ID0ge1xuICAgICAgICAgIGFzc2Vzc21lbnQ6IGFzc2Vzc21lbnQsXG4gICAgICAgICAgY29kZTogc3VibWl0dGVkQ29kZSxcbiAgICAgICAgICBmaW5pc2hlZDogZmFsc2UsXG4gICAgICAgICAgcmVzdWx0OiB7fVxuICAgICAgICB9O1xuICAgICAgICB2YXIgYm9keSA9IHtcbiAgICAgICAgICBjb2RlOiBzdWJtaXR0ZWRDb2RlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KG9wdGlvbnMuYmFzZVVybCArIGFzc2Vzc21lbnQuaWQsIGJvZHkpXG4gICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHN1Ym1pc3Npb24uY3VycmVudC5yZXN1bHQgPSBkYXRhO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAgICAgICAgICAgIHN1Ym1pc3Npb24uY3VycmVudC5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBzdWJtaXNzaW9uLmhhc1Jlc3VsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHN1Ym1pc3Npb24uY3VycmVudC5hc3Nlc3NtZW50ID09PSBhdEFzc2Vzc21lbnQuY3VycmVudCAmJlxuICAgICAgICAgIHN1Ym1pc3Npb24uY3VycmVudC5maW5pc2hlZCAmJlxuICAgICAgICAgIHN1Ym1pc3Npb24uY3VycmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgIHN1Ym1pc3Npb24uY3VycmVudC5yZXN1bHQucGFzcyAhPT0gdW5kZWZpbmVkO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHN1Ym1pc3Npb247XG4gICAgfVxuXG4gICAgdGhpcy4kZ2V0ID0gU3VibWlzc2lvbjtcbiAgfVxuXG4gIGFuZ3VsYXIubW9kdWxlKCdhdC5hc3Nlc3NtZW50LnN1Ym1pc3Npb24nLCBbXSlcbiAgICAucHJvdmlkZXIoJ2F0U3VibWlzc2lvbicsIFN1Ym1pc3Npb25Qcm92aWRlcik7XG59KShhbmd1bGFyKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=