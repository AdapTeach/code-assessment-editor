!function(s){s.module("at.assessment",["ngMaterial","at.assessment.editor","at.assessment.submission"])}(angular),function(s){"use strict";function t(){return{restrict:"EA",scope:{assessmentId:"@"},templateUrl:"assessment.tpl.html",controller:["atAssessment","atSubmission","$mdToast",function(t,e,n){s.extend(this,t.current),t.load(this.asssessmentId).success(function(){this.assessment=t.current}).error(function(){n.show({template:"<md-toast>Error !</md-toast>"})}),this.reset=e.resetCurrent,this.submit=e.submitCurrent}],controllerAs:"editor",transclude:!0}}function e(){function t(){var s={};return s.current={},s.load=function(t){return $http.get(e.baseUrl+t).success(function(t){s.current=t})},s}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},this.$get=t}s.module("at.assessment.editor",["ui.ace","at.assessment.submission"]).directive("atAssessmentEditor",t).provider("atAssessment",e)}(angular),function(s){function t(){function t(t,n,r){var i={current:{assessment:{},code:"",finished:!1,result:{}}},u={};return s.extend(u,i),u.resetCurrent=function(){u.current=i,u.current.code=t.current.startCode},u.submitCurrent=function(){return u.submit(t.current,u.current.code)},u.submit=function(s,t){r.hide(),r.show({templateUrl:"submissionProgressDialog.html",clickOutsideToClose:!1,escapeToClose:!1}),u.current={assessment:s,code:t,finished:!1,result:{}};var i={code:t};return n.post(e.baseUrl+s.id,i).success(function(s){u.current.result=s}).error(function(s){console.log(s)}).finally(function(){r.hide(),u.current.finished=!0})},u.hasResult=function(){return u.current.assessment===t.current&&u.current.finished&&void 0!==u.current.result&&void 0!==u.current.result.pass},u}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},t.$inject=["atAssessment","$http","$mdDialog"],this.$get=t}s.module("at.assessment.submission",[]).provider("atSubmission",t)}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiYXNzZXNzbWVudC9hc3Nlc3NtZW50LmpzIiwic3VibWlzc2lvbi9zdWJtaXNzaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFNBQUEsR0FFQSxFQUFBLE9BQUEsaUJBQ0EsYUFDQSx1QkFDQSw4QkFFQSxTQ1BBLFNBQUEsR0FDQSxZQUVBLFNBQUEsS0FDQSxPQUNBLFNBQUEsS0FDQSxPQUNBLGFBQUEsS0FFQSxZQUFBLHNCQUNBLFlBQUEsZUFBQSxlQUFBLFdBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxFQUFBLE9BQUEsS0FBQSxFQUFBLFNBQ0EsRUFBQSxLQUFBLEtBQUEsZUFBQSxRQUFBLFdBQ0EsS0FBQSxXQUFBLEVBQUEsVUFDQSxNQUFBLFdBQ0EsRUFBQSxNQUNBLFNBQUEsbUNBR0EsS0FBQSxNQUFBLEVBQUEsYUFDQSxLQUFBLE9BQUEsRUFBQSxnQkFFQSxhQUFBLFNBQ0EsWUFBQSxHQUlBLFFBQUEsS0FVQSxRQUFBLEtBQ0EsR0FBQSxLQVVBLE9BUkEsR0FBQSxXQUVBLEVBQUEsS0FBQSxTQUFBLEdBQ0EsTUFBQSxPQUFBLElBQUEsRUFBQSxRQUFBLEdBQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxRQUFBLEtBSUEsRUFuQkEsR0FBQSxJQUNBLFFBQUEsYUFHQSxNQUFBLE9BQUEsU0FBQSxHQUNBLEVBQUEsT0FBQSxFQUFBLElBaUJBLEtBQUEsS0FBQSxFQUlBLEVBQUEsT0FBQSx3QkFDQSxTQUNBLDZCQUNBLFVBQUEscUJBQUEsR0FDQSxTQUFBLGVBQUEsSUFDQSxTQzVEQSxTQUFBLEdBQ0EsUUFBQSxLQVNBLFFBQUEsR0FBQSxFQUFBLEVBQUEsR0FDQSxHQUFBLElBQ0EsU0FDQSxjQUNBLEtBQUEsR0FDQSxVQUFBLEVBQ0EsWUFHQSxJQWdEQSxPQS9DQSxHQUFBLE9BQUEsRUFBQSxHQUVBLEVBQUEsYUFBQSxXQUNBLEVBQUEsUUFBQSxFQUNBLEVBQUEsUUFBQSxLQUFBLEVBQUEsUUFBQSxXQUdBLEVBQUEsY0FBQSxXQUNBLE1BQUEsR0FBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsT0FHQSxFQUFBLE9BQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxPQUNBLEVBQUEsTUFDQSxZQUFBLGdDQUNBLHFCQUFBLEVBQ0EsZUFBQSxJQUVBLEVBQUEsU0FDQSxXQUFBLEVBQ0EsS0FBQSxFQUNBLFVBQUEsRUFDQSxVQUVBLElBQUEsSUFDQSxLQUFBLEVBRUEsT0FBQSxHQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsR0FBQSxHQUNBLFFBQUEsU0FBQSxHQUNBLEVBQUEsUUFBQSxPQUFBLElBRUEsTUFBQSxTQUFBLEdBQ0EsUUFBQSxJQUFBLEtBRUEsUUFBQSxXQUNBLEVBQUEsT0FDQSxFQUFBLFFBQUEsVUFBQSxLQUlBLEVBQUEsVUFBQSxXQUNBLE1BQUEsR0FBQSxRQUFBLGFBQUEsRUFBQSxTQUNBLEVBQUEsUUFBQSxVQUNBLFNBQUEsRUFBQSxRQUFBLFFBQ0EsU0FBQSxFQUFBLFFBQUEsT0FBQSxNQUdBLEVBaEVBLEdBQUEsSUFDQSxRQUFBLGFBRUEsTUFBQSxPQUFBLFNBQUEsR0FDQSxFQUFBLE9BQUEsRUFBQSxtREErREEsS0FBQSxLQUFBLEVBR0EsRUFBQSxPQUFBLCtCQUNBLFNBQUEsZUFBQSxJQUNBIiwiZmlsZSI6ImF0LWNvZGUtYXNzZXNzbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihhbmd1bGFyKXtcblxuICBhbmd1bGFyLm1vZHVsZSgnYXQuYXNzZXNzbWVudCcsW1xuICAgICduZ01hdGVyaWFsJyxcbiAgICAnYXQuYXNzZXNzbWVudC5lZGl0b3InLFxuICAgICdhdC5hc3Nlc3NtZW50LnN1Ym1pc3Npb24nXG4gIF0pXG59KShhbmd1bGFyKTsiLCIoZnVuY3Rpb24oYW5ndWxhcil7XG4gICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBhdEFzc2Vzc21lbnRFZGl0b3IoKXtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3QgOiAnRUEnLFxuICAgICAgc2NvcGUgOiB7XG4gICAgICAgIGFzc2Vzc21lbnRJZCA6ICdAJ1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsIDonYXNzZXNzbWVudC50cGwuaHRtbCcsXG4gICAgICBjb250cm9sbGVyIDogZnVuY3Rpb24oYXRBc3Nlc3NtZW50LGF0U3VibWlzc2lvbiwkbWRUb2FzdCl7XG4gICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHRoaXMsYXRBc3Nlc3NtZW50LmN1cnJlbnQpO1xuICAgICAgICBhdEFzc2Vzc21lbnQubG9hZCh0aGlzLmFzc3Nlc3NtZW50SWQpLnN1Y2Nlc3MoZnVuY3Rpb24oYXNzZXNzbWVudCl7XG4gICAgICAgICAgdGhpcy5hc3Nlc3NtZW50ID0gYXRBc3Nlc3NtZW50LmN1cnJlbnRcbiAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oKXtcbiAgICAgICAgICAkbWRUb2FzdC5zaG93KHtcbiAgICAgICAgICAgIHRlbXBsYXRlIDogJzxtZC10b2FzdD5FcnJvciAhPC9tZC10b2FzdD4nXG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVzZXQgPSBhdFN1Ym1pc3Npb24ucmVzZXRDdXJyZW50O1xuICAgICAgICB0aGlzLnN1Ym1pdCA9IGF0U3VibWlzc2lvbi5zdWJtaXRDdXJyZW50O1xuICAgICAgfSxcbiAgICAgIGNvbnRyb2xsZXJBcyA6ICdlZGl0b3InLFxuICAgICAgdHJhbnNjbHVkZSA6IHRydWVcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhdEFzc2Vzc21lbnRQcm92aWRlcigpe1xuXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBiYXNlVXJsIDogJ2xvY2FsaG9zdC8nXG4gICAgfTtcblxuICAgIHRoaXMuY29uZmlnID0gZnVuY3Rpb24ocGFyYW0pe1xuICAgICAgYW5ndWxhci5leHRlbmQob3B0aW9ucyxwYXJhbSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIEFzc2Vzc21lbnQoKXtcbiAgICAgIHZhciBhc3Nlc3NtZW50ID0ge307XG5cbiAgICAgIGFzc2Vzc21lbnQuY3VycmVudCA9IHt9O1xuXG4gICAgICBhc3Nlc3NtZW50LmxvYWQgPSBmdW5jdGlvbiAoYXNzZXNzbWVudElkKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQob3B0aW9ucy5iYXNlVXJsICsgYXNzZXNzbWVudElkKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgYXNzZXNzbWVudC5jdXJyZW50ID0gZGF0YTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gYXNzZXNzbWVudDtcbiAgICB9XG5cbiAgICB0aGlzLiRnZXQgPSBBc3Nlc3NtZW50O1xuICB9XG5cblxuICBhbmd1bGFyLm1vZHVsZSgnYXQuYXNzZXNzbWVudC5lZGl0b3InLFtcbiAgICAndWkuYWNlJyxcbiAgICAnYXQuYXNzZXNzbWVudC5zdWJtaXNzaW9uJ1xuICBdKS5kaXJlY3RpdmUoJ2F0QXNzZXNzbWVudEVkaXRvcicsYXRBc3Nlc3NtZW50RWRpdG9yKVxuICAgIC5wcm92aWRlcignYXRBc3Nlc3NtZW50JyxhdEFzc2Vzc21lbnRQcm92aWRlcik7XG59KShhbmd1bGFyKTtcblxuXG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgZnVuY3Rpb24gU3VibWlzc2lvblByb3ZpZGVyKCkge1xuXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBiYXNlVXJsOiAnbG9jYWxob3N0LydcbiAgICB9O1xuICAgIHRoaXMuY29uZmlnID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICBhbmd1bGFyLmV4dGVuZChvcHRpb25zLCBwYXJhbSlcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gU3VibWlzc2lvbihhdEFzc2Vzc21lbnQsICRodHRwLCAkbWREaWFsb2cpIHtcbiAgICAgIHZhciBiYXNlID0ge1xuICAgICAgICAgIGN1cnJlbnQ6IHtcbiAgICAgICAgICAgIGFzc2Vzc21lbnQ6IHt9LFxuICAgICAgICAgICAgY29kZTogJycsXG4gICAgICAgICAgICBmaW5pc2hlZDogZmFsc2UsXG4gICAgICAgICAgICByZXN1bHQ6IHt9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdWJtaXNzaW9uID0ge307XG4gICAgICBhbmd1bGFyLmV4dGVuZChzdWJtaXNzaW9uLCBiYXNlKTtcblxuICAgICAgc3VibWlzc2lvbi5yZXNldEN1cnJlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN1Ym1pc3Npb24uY3VycmVudCA9IGJhc2U7XG4gICAgICAgIHN1Ym1pc3Npb24uY3VycmVudC5jb2RlID0gYXRBc3Nlc3NtZW50LmN1cnJlbnQuc3RhcnRDb2RlO1xuICAgICAgfTtcblxuICAgICAgc3VibWlzc2lvbi5zdWJtaXRDdXJyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc3VibWlzc2lvbi5zdWJtaXQoYXRBc3Nlc3NtZW50LmN1cnJlbnQsIHN1Ym1pc3Npb24uY3VycmVudC5jb2RlKTtcbiAgICAgIH07XG5cbiAgICAgIHN1Ym1pc3Npb24uc3VibWl0ID0gZnVuY3Rpb24gKGFzc2Vzc21lbnQsIHN1Ym1pdHRlZENvZGUpIHtcbiAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAgICAgICAgJG1kRGlhbG9nLnNob3coe1xuICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3VibWlzc2lvblByb2dyZXNzRGlhbG9nLmh0bWwnLFxuICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IGZhbHNlLFxuICAgICAgICAgIGVzY2FwZVRvQ2xvc2U6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQgPSB7XG4gICAgICAgICAgYXNzZXNzbWVudDogYXNzZXNzbWVudCxcbiAgICAgICAgICBjb2RlOiBzdWJtaXR0ZWRDb2RlLFxuICAgICAgICAgIGZpbmlzaGVkOiBmYWxzZSxcbiAgICAgICAgICByZXN1bHQ6IHt9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBib2R5ID0ge1xuICAgICAgICAgIGNvZGU6IHN1Ym1pdHRlZENvZGVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3Qob3B0aW9ucy5iYXNlVXJsICsgYXNzZXNzbWVudC5pZCwgYm9keSlcbiAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LnJlc3VsdCA9IGRhdGE7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHN1Ym1pc3Npb24uaGFzUmVzdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc3VibWlzc2lvbi5jdXJyZW50LmFzc2Vzc21lbnQgPT09IGF0QXNzZXNzbWVudC5jdXJyZW50ICYmXG4gICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LmZpbmlzaGVkICYmXG4gICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LnJlc3VsdC5wYXNzICE9PSB1bmRlZmluZWQ7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gc3VibWlzc2lvbjtcbiAgICB9XG5cbiAgICB0aGlzLiRnZXQgPSBTdWJtaXNzaW9uO1xuICB9XG5cbiAgYW5ndWxhci5tb2R1bGUoJ2F0LmFzc2Vzc21lbnQuc3VibWlzc2lvbicsIFtdKVxuICAgIC5wcm92aWRlcignYXRTdWJtaXNzaW9uJywgU3VibWlzc2lvblByb3ZpZGVyKTtcbn0pKGFuZ3VsYXIpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==