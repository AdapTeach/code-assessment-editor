!function(s){s.module("at.assessment",["ngMaterial","at.assessment.editor","at.assessment.submission"])}(angular),angular.module("at.assessment").run(["$templateCache",function(s){s.put("assessment/assessment.tpl.html",'<md-toolbar class="fixed-toolbar">\n    <div class="md-toolbar-tools">\n        {{ assessment.title }}\n        <span flex></span>\n        <md-button ng-if="false">\n            Help\n        </md-button>\n        <md-button ng-click="reset()">\n            Reset\n        </md-button>\n        <md-button class="md-button-colored" ng-click="submit()">\n            Submit code\n        </md-button>\n    </div>\n</md-toolbar>\n<md-content class="md-content-padding" style="padding-top:66px;">\n\n    <p>\n        {{ assessment.instructions }}\n    </p>\n\n    <section ui-ace="AceConfig.java" ng-model="Submissions.current.code"></section>\n\n    <section class="result" ng-transclude>\n\n    </section>\n    <!--<submission-result></submission-result>-->\n\n</md-content>'),s.put("submission/submissionProgress.tpl.html",'<md-dialog class="dialog-result">\n    <md-toolbar class="md-theme-light">\n        <div class="md-toolbar-tools" layout="horizontal" layout-align="center">\n            <h3>\n                Work in progress....\n            </h3>\n        </div>\n    </md-toolbar>\n    <div class="dialog-content">\n        <md-progress-linear mode="indeterminate"></md-progress-linear>\n    </div>\n</md-dialog>')}]),function(s){"use strict";function t(t,n,e,r){n.load(t.assessmentId).success(function(){t.assessment=n.current,e.current.code=s.copy(n.current.startCode),t.Submissions=e}).error(function(){r.show({template:"<md-toast>Error !</md-toast>"})}),t.reset=e.resetCurrent,t.submit=e.submitCurrent}function n(){return{restrict:"EA",scope:{assessmentId:"="},templateUrl:"assessment/assessment.tpl.html",controller:"atAssessmentCtrl",transclude:!0}}function e(){function t(s){var t={};return t.current={},t.load=function(e){return s.get(n.baseUrl+e).success(function(s){t.current=s})},t}var n={baseUrl:"localhost/"};this.config=function(t){s.extend(n,t)},t.$inject=["$http"],this.$get=t}t.$inject=["$scope","atAssessment","atSubmission","$mdToast"],s.module("at.assessment.editor",["ui.ace","at.assessment.submission"]).directive("atAssessmentEditor",n).controller("atAssessmentCtrl",t).provider("atAssessment",e)}(angular),function(s){function t(){function t(t,e,r){var o={current:{assessment:{},code:"",finished:!1,result:{}}},i={};return s.extend(i,o),i.resetCurrent=function(){i.current=o,i.current.code=t.current.startCode},i.submitCurrent=function(){return i.submit(t.current,i.current.code)},i.submit=function(s,t){r.hide(),r.show({templateUrl:"submission/submissionProgressDialog.html",clickOutsideToClose:!1,escapeToClose:!1}),i.current={assessment:s,code:t,finished:!1,result:{}};var o={code:t};return e.post(n.baseUrl+s.id,o).success(function(s){i.current.result=s}).error(function(s){console.log(s)}).finally(function(){r.hide(),i.current.finished=!0})},i.hasResult=function(){return i.current.assessment===t.current&&i.current.finished&&void 0!==i.current.result&&void 0!==i.current.result.pass},i}var n={baseUrl:"localhost/"};this.config=function(t){s.extend(n,t)},t.$inject=["atAssessment","$http","$mdDialog"],this.$get=t}s.module("at.assessment.submission",[]).provider("atSubmission",t)}(angular);
//# sourceMappingURL=data:application/json;base64,