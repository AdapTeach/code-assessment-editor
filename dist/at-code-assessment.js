!function(s){s.module("at.assessment",["ngMaterial","at.assessment.editor","at.assessment.submission"])}(angular),function(s){"use strict";function t(t,e,n,r){e.load(t.assessmentId).success(function(){t.assessment=e.current,n.current.code=s.copy(e.current.startCode),t.submission=n}).error(function(){r.show({template:"<md-toast>Error !</md-toast>"})}),t.reset=n.resetCurrent,t.submit=n.submitCurrent}function e(){return{restrict:"EA",scope:{assessmentId:"="},templateUrl:"assessment/assessment.tpl.html",controller:"atAssessmentCtrl",transclude:!0}}function n(){function t(s){var t={};return t.current={},t.load=function(n){return s.get(e.baseUrl+n).success(function(s){t.current=s})},t}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},t.$inject=["$http"],this.$get=t}t.$inject=["$scope","atAssessment","atSubmission","$mdToast"],s.module("at.assessment.editor",["ui.ace","at.assessment.submission"]).directive("atAssessmentEditor",e).controller("atAssessmentCtrl",t).provider("atAssessment",n)}(angular),function(s){function t(){function t(t,n,r){var u={current:{assessment:{},code:"",finished:!1,result:{}}},o={};return s.extend(o,u),o.resetCurrent=function(){o.current=u,o.current.code=t.current.startCode},o.submitCurrent=function(){return o.submit(t.current,o.current.code)},o.submit=function(s,t){r.hide(),r.show({templateUrl:"submission/submissionProgressDialog.html",clickOutsideToClose:!1,escapeToClose:!1}),o.current={assessment:s,code:t,finished:!1,result:{}};var u={code:t};return n.post(e.baseUrl+s.id,u).success(function(s){o.current.result=s}).error(function(s){console.log(s)}).finally(function(){r.hide(),o.current.finished=!0})},o.hasResult=function(){return o.current.assessment===t.current&&o.current.finished&&void 0!==o.current.result&&void 0!==o.current.result.pass},o}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},t.$inject=["atAssessment","$http","$mdDialog"],this.$get=t}s.module("at.assessment.submission",[]).provider("atSubmission",t)}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiYXNzZXNzbWVudC9hc3Nlc3NtZW50LmpzIiwic3VibWlzc2lvbi9zdWJtaXNzaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFNBQUEsR0FFQSxFQUFBLE9BQUEsaUJBQ0EsYUFDQSx1QkFDQSw4QkFFQSxTQ1BBLFNBQUEsR0FDQSxZQUVBLFNBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsS0FBQSxFQUFBLGNBQUEsUUFBQSxXQUNBLEVBQUEsV0FBQSxFQUFBLFFBQ0EsRUFBQSxRQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxXQUNBLEVBQUEsV0FBQSxJQUNBLE1BQUEsV0FDQSxFQUFBLE1BQ0EsU0FBQSxtQ0FHQSxFQUFBLE1BQUEsRUFBQSxhQUNBLEVBQUEsT0FBQSxFQUFBLGNBR0EsUUFBQSxLQUNBLE9BQ0EsU0FBQSxLQUNBLE9BQ0EsYUFBQSxLQUVBLFlBQUEsaUNBQ0EsV0FBQSxtQkFDQSxZQUFBLEdBSUEsUUFBQSxLQVVBLFFBQUEsR0FBQSxHQUNBLEdBQUEsS0FVQSxPQVJBLEdBQUEsV0FFQSxFQUFBLEtBQUEsU0FBQSxHQUNBLE1BQUEsR0FBQSxJQUFBLEVBQUEsUUFBQSxHQUFBLFFBQUEsU0FBQSxHQUNBLEVBQUEsUUFBQSxLQUlBLEVBbkJBLEdBQUEsSUFDQSxRQUFBLGFBR0EsTUFBQSxPQUFBLFNBQUEsR0FDQSxFQUFBLE9BQUEsRUFBQSx3QkFpQkEsS0FBQSxLQUFBLGdFQUlBLEVBQUEsT0FBQSx3QkFDQSxTQUNBLDZCQUNBLFVBQUEscUJBQUEsR0FDQSxXQUFBLG1CQUFBLEdBQ0EsU0FBQSxlQUFBLElBQ0EsU0MvREEsU0FBQSxHQUNBLFFBQUEsS0FTQSxRQUFBLEdBQUEsRUFBQSxFQUFBLEdBQ0EsR0FBQSxJQUNBLFNBQ0EsY0FDQSxLQUFBLEdBQ0EsVUFBQSxFQUNBLFlBR0EsSUFnREEsT0EvQ0EsR0FBQSxPQUFBLEVBQUEsR0FFQSxFQUFBLGFBQUEsV0FDQSxFQUFBLFFBQUEsRUFDQSxFQUFBLFFBQUEsS0FBQSxFQUFBLFFBQUEsV0FHQSxFQUFBLGNBQUEsV0FDQSxNQUFBLEdBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxRQUFBLE9BR0EsRUFBQSxPQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsT0FDQSxFQUFBLE1BQ0EsWUFBQSwyQ0FDQSxxQkFBQSxFQUNBLGVBQUEsSUFFQSxFQUFBLFNBQ0EsV0FBQSxFQUNBLEtBQUEsRUFDQSxVQUFBLEVBQ0EsVUFFQSxJQUFBLElBQ0EsS0FBQSxFQUVBLE9BQUEsR0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLEdBQUEsR0FDQSxRQUFBLFNBQUEsR0FDQSxFQUFBLFFBQUEsT0FBQSxJQUVBLE1BQUEsU0FBQSxHQUNBLFFBQUEsSUFBQSxLQUVBLFFBQUEsV0FDQSxFQUFBLE9BQ0EsRUFBQSxRQUFBLFVBQUEsS0FJQSxFQUFBLFVBQUEsV0FDQSxNQUFBLEdBQUEsUUFBQSxhQUFBLEVBQUEsU0FDQSxFQUFBLFFBQUEsVUFDQSxTQUFBLEVBQUEsUUFBQSxRQUNBLFNBQUEsRUFBQSxRQUFBLE9BQUEsTUFHQSxFQWhFQSxHQUFBLElBQ0EsUUFBQSxhQUVBLE1BQUEsT0FBQSxTQUFBLEdBQ0EsRUFBQSxPQUFBLEVBQUEsbURBK0RBLEtBQUEsS0FBQSxFQUdBLEVBQUEsT0FBQSwrQkFDQSxTQUFBLGVBQUEsSUFDQSIsImZpbGUiOiJhdC1jb2RlLWFzc2Vzc21lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oYW5ndWxhcil7XG5cbiAgYW5ndWxhci5tb2R1bGUoJ2F0LmFzc2Vzc21lbnQnLFtcbiAgICAnbmdNYXRlcmlhbCcsXG4gICAgJ2F0LmFzc2Vzc21lbnQuZWRpdG9yJyxcbiAgICAnYXQuYXNzZXNzbWVudC5zdWJtaXNzaW9uJ1xuICBdKVxufSkoYW5ndWxhcik7IiwiKGZ1bmN0aW9uKGFuZ3VsYXIpe1xuICAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gYXRBc3Nlc3NtZW50Q3RybCgkc2NvcGUsYXRBc3Nlc3NtZW50LGF0U3VibWlzc2lvbiwkbWRUb2FzdCl7XG4gICAgYXRBc3Nlc3NtZW50LmxvYWQoJHNjb3BlLmFzc2Vzc21lbnRJZCkuc3VjY2VzcyhmdW5jdGlvbigpe1xuICAgICAgJHNjb3BlLmFzc2Vzc21lbnQgPSBhdEFzc2Vzc21lbnQuY3VycmVudDtcbiAgICAgIGF0U3VibWlzc2lvbi5jdXJyZW50LmNvZGUgPSBhbmd1bGFyLmNvcHkoYXRBc3Nlc3NtZW50LmN1cnJlbnQuc3RhcnRDb2RlKTtcbiAgICAgICRzY29wZS5zdWJtaXNzaW9uID0gYXRTdWJtaXNzaW9uO1xuICAgIH0pLmVycm9yKGZ1bmN0aW9uKCl7XG4gICAgICAkbWRUb2FzdC5zaG93KHtcbiAgICAgICAgdGVtcGxhdGUgOiAnPG1kLXRvYXN0PkVycm9yICE8L21kLXRvYXN0PidcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgJHNjb3BlLnJlc2V0ID0gYXRTdWJtaXNzaW9uLnJlc2V0Q3VycmVudDtcbiAgICAkc2NvcGUuc3VibWl0ID0gYXRTdWJtaXNzaW9uLnN1Ym1pdEN1cnJlbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBhdEFzc2Vzc21lbnRFZGl0b3IoKXtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3QgOiAnRUEnLFxuICAgICAgc2NvcGUgOiB7XG4gICAgICAgIGFzc2Vzc21lbnRJZCA6ICc9J1xuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlVXJsIDonYXNzZXNzbWVudC9hc3Nlc3NtZW50LnRwbC5odG1sJyxcbiAgICAgIGNvbnRyb2xsZXIgOiAnYXRBc3Nlc3NtZW50Q3RybCcsXG4gICAgICB0cmFuc2NsdWRlIDogdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGF0QXNzZXNzbWVudFByb3ZpZGVyKCl7XG5cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIGJhc2VVcmwgOiAnbG9jYWxob3N0LydcbiAgICB9O1xuXG4gICAgdGhpcy5jb25maWcgPSBmdW5jdGlvbihwYXJhbSl7XG4gICAgICBhbmd1bGFyLmV4dGVuZChvcHRpb25zLHBhcmFtKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQXNzZXNzbWVudCgkaHR0cCl7XG4gICAgICB2YXIgYXNzZXNzbWVudCA9IHt9O1xuXG4gICAgICBhc3Nlc3NtZW50LmN1cnJlbnQgPSB7fTtcblxuICAgICAgYXNzZXNzbWVudC5sb2FkID0gZnVuY3Rpb24gKGFzc2Vzc21lbnRJZCkge1xuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KG9wdGlvbnMuYmFzZVVybCArIGFzc2Vzc21lbnRJZCkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGFzc2Vzc21lbnQuY3VycmVudCA9IGRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGFzc2Vzc21lbnQ7XG4gICAgfVxuXG4gICAgdGhpcy4kZ2V0ID0gQXNzZXNzbWVudDtcbiAgfVxuXG5cbiAgYW5ndWxhci5tb2R1bGUoJ2F0LmFzc2Vzc21lbnQuZWRpdG9yJyxbXG4gICAgJ3VpLmFjZScsXG4gICAgJ2F0LmFzc2Vzc21lbnQuc3VibWlzc2lvbidcbiAgXSkuZGlyZWN0aXZlKCdhdEFzc2Vzc21lbnRFZGl0b3InLGF0QXNzZXNzbWVudEVkaXRvcilcbiAgICAuY29udHJvbGxlcignYXRBc3Nlc3NtZW50Q3RybCcsYXRBc3Nlc3NtZW50Q3RybClcbiAgICAucHJvdmlkZXIoJ2F0QXNzZXNzbWVudCcsYXRBc3Nlc3NtZW50UHJvdmlkZXIpO1xufSkoYW5ndWxhcik7XG5cblxuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gIGZ1bmN0aW9uIFN1Ym1pc3Npb25Qcm92aWRlcigpIHtcblxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgYmFzZVVybDogJ2xvY2FsaG9zdC8nXG4gICAgfTtcbiAgICB0aGlzLmNvbmZpZyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgYW5ndWxhci5leHRlbmQob3B0aW9ucywgcGFyYW0pXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFN1Ym1pc3Npb24oYXRBc3Nlc3NtZW50LCAkaHR0cCwgJG1kRGlhbG9nKSB7XG4gICAgICB2YXIgYmFzZSA9IHtcbiAgICAgICAgICBjdXJyZW50OiB7XG4gICAgICAgICAgICBhc3Nlc3NtZW50OiB7fSxcbiAgICAgICAgICAgIGNvZGU6ICcnLFxuICAgICAgICAgICAgZmluaXNoZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcmVzdWx0OiB7fVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3VibWlzc2lvbiA9IHt9O1xuICAgICAgYW5ndWxhci5leHRlbmQoc3VibWlzc2lvbiwgYmFzZSk7XG5cbiAgICAgIHN1Ym1pc3Npb24ucmVzZXRDdXJyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQgPSBiYXNlO1xuICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQuY29kZSA9IGF0QXNzZXNzbWVudC5jdXJyZW50LnN0YXJ0Q29kZTtcbiAgICAgIH07XG5cbiAgICAgIHN1Ym1pc3Npb24uc3VibWl0Q3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHN1Ym1pc3Npb24uc3VibWl0KGF0QXNzZXNzbWVudC5jdXJyZW50LCBzdWJtaXNzaW9uLmN1cnJlbnQuY29kZSk7XG4gICAgICB9O1xuXG4gICAgICBzdWJtaXNzaW9uLnN1Ym1pdCA9IGZ1bmN0aW9uIChhc3Nlc3NtZW50LCBzdWJtaXR0ZWRDb2RlKSB7XG4gICAgICAgICRtZERpYWxvZy5oaWRlKCk7XG4gICAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N1Ym1pc3Npb24vc3VibWlzc2lvblByb2dyZXNzRGlhbG9nLmh0bWwnLFxuICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IGZhbHNlLFxuICAgICAgICAgIGVzY2FwZVRvQ2xvc2U6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQgPSB7XG4gICAgICAgICAgYXNzZXNzbWVudDogYXNzZXNzbWVudCxcbiAgICAgICAgICBjb2RlOiBzdWJtaXR0ZWRDb2RlLFxuICAgICAgICAgIGZpbmlzaGVkOiBmYWxzZSxcbiAgICAgICAgICByZXN1bHQ6IHt9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBib2R5ID0ge1xuICAgICAgICAgIGNvZGU6IHN1Ym1pdHRlZENvZGVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3Qob3B0aW9ucy5iYXNlVXJsICsgYXNzZXNzbWVudC5pZCwgYm9keSlcbiAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LnJlc3VsdCA9IGRhdGE7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHN1Ym1pc3Npb24uaGFzUmVzdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc3VibWlzc2lvbi5jdXJyZW50LmFzc2Vzc21lbnQgPT09IGF0QXNzZXNzbWVudC5jdXJyZW50ICYmXG4gICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LmZpbmlzaGVkICYmXG4gICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LnJlc3VsdC5wYXNzICE9PSB1bmRlZmluZWQ7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gc3VibWlzc2lvbjtcbiAgICB9XG5cbiAgICB0aGlzLiRnZXQgPSBTdWJtaXNzaW9uO1xuICB9XG5cbiAgYW5ndWxhci5tb2R1bGUoJ2F0LmFzc2Vzc21lbnQuc3VibWlzc2lvbicsIFtdKVxuICAgIC5wcm92aWRlcignYXRTdWJtaXNzaW9uJywgU3VibWlzc2lvblByb3ZpZGVyKTtcbn0pKGFuZ3VsYXIpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==