!function(s){s.module("at.assessment",["ngMaterial","at.assessment.editor","at.assessment.submission"])}(angular),function(s){"use strict";function t(s,t,e){console.log(this),s.load(this.asssessmentId).success(function(){this.assessment=s.current}).error(function(){e.show({template:"<md-toast>Error !</md-toast>"})}),this.reset=t.resetCurrent,this.submit=t.submitCurrent}function e(){return{restrict:"EA",scope:{assessmentId:"@"},templateUrl:"assessment.tpl.html",controller:"atAssessmentCtrl",controllerAs:"editor",transclude:!0}}function n(){function t(s){var t={};return t.current={},t.load=function(n){return s.get(e.baseUrl+n).success(function(s){t.current=s})},t}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},t.$inject=["$http"],this.$get=t}t.$inject=["atAssessment","atSubmission","$mdToast"],s.module("at.assessment.editor",["ui.ace","at.assessment.submission"]).directive("atAssessmentEditor",e).controller("atAssessmentCtrl",t).provider("atAssessment",n)}(angular),function(s){function t(){function t(t,n,r){var i={current:{assessment:{},code:"",finished:!1,result:{}}},o={};return s.extend(o,i),o.resetCurrent=function(){o.current=i,o.current.code=t.current.startCode},o.submitCurrent=function(){return o.submit(t.current,o.current.code)},o.submit=function(s,t){r.hide(),r.show({templateUrl:"submissionProgressDialog.html",clickOutsideToClose:!1,escapeToClose:!1}),o.current={assessment:s,code:t,finished:!1,result:{}};var i={code:t};return n.post(e.baseUrl+s.id,i).success(function(s){o.current.result=s}).error(function(s){console.log(s)}).finally(function(){r.hide(),o.current.finished=!0})},o.hasResult=function(){return o.current.assessment===t.current&&o.current.finished&&void 0!==o.current.result&&void 0!==o.current.result.pass},o}var e={baseUrl:"localhost/"};this.config=function(t){s.extend(e,t)},t.$inject=["atAssessment","$http","$mdDialog"],this.$get=t}s.module("at.assessment.submission",[]).provider("atSubmission",t)}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiYXNzZXNzbWVudC9hc3Nlc3NtZW50LmpzIiwic3VibWlzc2lvbi9zdWJtaXNzaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFNBQUEsR0FFQSxFQUFBLE9BQUEsaUJBQ0EsYUFDQSx1QkFDQSw4QkFFQSxTQ1BBLFNBQUEsR0FDQSxZQUVBLFNBQUEsR0FBQSxFQUFBLEVBQUEsR0FDQSxRQUFBLElBQUEsTUFDQSxFQUFBLEtBQUEsS0FBQSxlQUFBLFFBQUEsV0FDQSxLQUFBLFdBQUEsRUFBQSxVQUNBLE1BQUEsV0FDQSxFQUFBLE1BQ0EsU0FBQSxtQ0FHQSxLQUFBLE1BQUEsRUFBQSxhQUNBLEtBQUEsT0FBQSxFQUFBLGNBR0EsUUFBQSxLQUNBLE9BQ0EsU0FBQSxLQUNBLE9BQ0EsYUFBQSxLQUVBLFlBQUEsc0JBQ0EsV0FBQSxtQkFDQSxhQUFBLFNBQ0EsWUFBQSxHQUlBLFFBQUEsS0FVQSxRQUFBLEdBQUEsR0FDQSxHQUFBLEtBVUEsT0FSQSxHQUFBLFdBRUEsRUFBQSxLQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsSUFBQSxFQUFBLFFBQUEsR0FBQSxRQUFBLFNBQUEsR0FDQSxFQUFBLFFBQUEsS0FJQSxFQW5CQSxHQUFBLElBQ0EsUUFBQSxhQUdBLE1BQUEsT0FBQSxTQUFBLEdBQ0EsRUFBQSxPQUFBLEVBQUEsd0JBaUJBLEtBQUEsS0FBQSx1REFJQSxFQUFBLE9BQUEsd0JBQ0EsU0FDQSw2QkFDQSxVQUFBLHFCQUFBLEdBQ0EsV0FBQSxtQkFBQSxHQUNBLFNBQUEsZUFBQSxJQUNBLFNDL0RBLFNBQUEsR0FDQSxRQUFBLEtBU0EsUUFBQSxHQUFBLEVBQUEsRUFBQSxHQUNBLEdBQUEsSUFDQSxTQUNBLGNBQ0EsS0FBQSxHQUNBLFVBQUEsRUFDQSxZQUdBLElBZ0RBLE9BL0NBLEdBQUEsT0FBQSxFQUFBLEdBRUEsRUFBQSxhQUFBLFdBQ0EsRUFBQSxRQUFBLEVBQ0EsRUFBQSxRQUFBLEtBQUEsRUFBQSxRQUFBLFdBR0EsRUFBQSxjQUFBLFdBQ0EsTUFBQSxHQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxPQUdBLEVBQUEsT0FBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLE9BQ0EsRUFBQSxNQUNBLFlBQUEsZ0NBQ0EscUJBQUEsRUFDQSxlQUFBLElBRUEsRUFBQSxTQUNBLFdBQUEsRUFDQSxLQUFBLEVBQ0EsVUFBQSxFQUNBLFVBRUEsSUFBQSxJQUNBLEtBQUEsRUFFQSxPQUFBLEdBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxHQUFBLEdBQ0EsUUFBQSxTQUFBLEdBQ0EsRUFBQSxRQUFBLE9BQUEsSUFFQSxNQUFBLFNBQUEsR0FDQSxRQUFBLElBQUEsS0FFQSxRQUFBLFdBQ0EsRUFBQSxPQUNBLEVBQUEsUUFBQSxVQUFBLEtBSUEsRUFBQSxVQUFBLFdBQ0EsTUFBQSxHQUFBLFFBQUEsYUFBQSxFQUFBLFNBQ0EsRUFBQSxRQUFBLFVBQ0EsU0FBQSxFQUFBLFFBQUEsUUFDQSxTQUFBLEVBQUEsUUFBQSxPQUFBLE1BR0EsRUFoRUEsR0FBQSxJQUNBLFFBQUEsYUFFQSxNQUFBLE9BQUEsU0FBQSxHQUNBLEVBQUEsT0FBQSxFQUFBLG1EQStEQSxLQUFBLEtBQUEsRUFHQSxFQUFBLE9BQUEsK0JBQ0EsU0FBQSxlQUFBLElBQ0EiLCJmaWxlIjoiYXQtY29kZS1hc3Nlc3NtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKGFuZ3VsYXIpe1xuXG4gIGFuZ3VsYXIubW9kdWxlKCdhdC5hc3Nlc3NtZW50JyxbXG4gICAgJ25nTWF0ZXJpYWwnLFxuICAgICdhdC5hc3Nlc3NtZW50LmVkaXRvcicsXG4gICAgJ2F0LmFzc2Vzc21lbnQuc3VibWlzc2lvbidcbiAgXSlcbn0pKGFuZ3VsYXIpOyIsIihmdW5jdGlvbihhbmd1bGFyKXtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIGF0QXNzZXNzbWVudEN0cmwoYXRBc3Nlc3NtZW50LGF0U3VibWlzc2lvbiwkbWRUb2FzdCl7XG4gICAgY29uc29sZS5sb2codGhpcylcbiAgICBhdEFzc2Vzc21lbnQubG9hZCh0aGlzLmFzc3Nlc3NtZW50SWQpLnN1Y2Nlc3MoZnVuY3Rpb24oYXNzZXNzbWVudCl7XG4gICAgICB0aGlzLmFzc2Vzc21lbnQgPSBhdEFzc2Vzc21lbnQuY3VycmVudFxuICAgIH0pLmVycm9yKGZ1bmN0aW9uKCl7XG4gICAgICAkbWRUb2FzdC5zaG93KHtcbiAgICAgICAgdGVtcGxhdGUgOiAnPG1kLXRvYXN0PkVycm9yICE8L21kLXRvYXN0PidcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgdGhpcy5yZXNldCA9IGF0U3VibWlzc2lvbi5yZXNldEN1cnJlbnQ7XG4gICAgdGhpcy5zdWJtaXQgPSBhdFN1Ym1pc3Npb24uc3VibWl0Q3VycmVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0QXNzZXNzbWVudEVkaXRvcigpe1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdCA6ICdFQScsXG4gICAgICBzY29wZSA6IHtcbiAgICAgICAgYXNzZXNzbWVudElkIDogJ0AnXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmwgOidhc3Nlc3NtZW50LnRwbC5odG1sJyxcbiAgICAgIGNvbnRyb2xsZXIgOiAnYXRBc3Nlc3NtZW50Q3RybCcsXG4gICAgICBjb250cm9sbGVyQXMgOiAnZWRpdG9yJyxcbiAgICAgIHRyYW5zY2x1ZGUgOiB0cnVlXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXRBc3Nlc3NtZW50UHJvdmlkZXIoKXtcblxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgYmFzZVVybCA6ICdsb2NhbGhvc3QvJ1xuICAgIH07XG5cbiAgICB0aGlzLmNvbmZpZyA9IGZ1bmN0aW9uKHBhcmFtKXtcbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKG9wdGlvbnMscGFyYW0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBBc3Nlc3NtZW50KCRodHRwKXtcbiAgICAgIHZhciBhc3Nlc3NtZW50ID0ge307XG5cbiAgICAgIGFzc2Vzc21lbnQuY3VycmVudCA9IHt9O1xuXG4gICAgICBhc3Nlc3NtZW50LmxvYWQgPSBmdW5jdGlvbiAoYXNzZXNzbWVudElkKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQob3B0aW9ucy5iYXNlVXJsICsgYXNzZXNzbWVudElkKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgYXNzZXNzbWVudC5jdXJyZW50ID0gZGF0YTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gYXNzZXNzbWVudDtcbiAgICB9XG5cbiAgICB0aGlzLiRnZXQgPSBBc3Nlc3NtZW50O1xuICB9XG5cblxuICBhbmd1bGFyLm1vZHVsZSgnYXQuYXNzZXNzbWVudC5lZGl0b3InLFtcbiAgICAndWkuYWNlJyxcbiAgICAnYXQuYXNzZXNzbWVudC5zdWJtaXNzaW9uJ1xuICBdKS5kaXJlY3RpdmUoJ2F0QXNzZXNzbWVudEVkaXRvcicsYXRBc3Nlc3NtZW50RWRpdG9yKVxuICAgIC5jb250cm9sbGVyKCdhdEFzc2Vzc21lbnRDdHJsJyxhdEFzc2Vzc21lbnRDdHJsKVxuICAgIC5wcm92aWRlcignYXRBc3Nlc3NtZW50JyxhdEFzc2Vzc21lbnRQcm92aWRlcik7XG59KShhbmd1bGFyKTtcblxuXG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgZnVuY3Rpb24gU3VibWlzc2lvblByb3ZpZGVyKCkge1xuXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBiYXNlVXJsOiAnbG9jYWxob3N0LydcbiAgICB9O1xuICAgIHRoaXMuY29uZmlnID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICBhbmd1bGFyLmV4dGVuZChvcHRpb25zLCBwYXJhbSlcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gU3VibWlzc2lvbihhdEFzc2Vzc21lbnQsICRodHRwLCAkbWREaWFsb2cpIHtcbiAgICAgIHZhciBiYXNlID0ge1xuICAgICAgICAgIGN1cnJlbnQ6IHtcbiAgICAgICAgICAgIGFzc2Vzc21lbnQ6IHt9LFxuICAgICAgICAgICAgY29kZTogJycsXG4gICAgICAgICAgICBmaW5pc2hlZDogZmFsc2UsXG4gICAgICAgICAgICByZXN1bHQ6IHt9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdWJtaXNzaW9uID0ge307XG4gICAgICBhbmd1bGFyLmV4dGVuZChzdWJtaXNzaW9uLCBiYXNlKTtcblxuICAgICAgc3VibWlzc2lvbi5yZXNldEN1cnJlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN1Ym1pc3Npb24uY3VycmVudCA9IGJhc2U7XG4gICAgICAgIHN1Ym1pc3Npb24uY3VycmVudC5jb2RlID0gYXRBc3Nlc3NtZW50LmN1cnJlbnQuc3RhcnRDb2RlO1xuICAgICAgfTtcblxuICAgICAgc3VibWlzc2lvbi5zdWJtaXRDdXJyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc3VibWlzc2lvbi5zdWJtaXQoYXRBc3Nlc3NtZW50LmN1cnJlbnQsIHN1Ym1pc3Npb24uY3VycmVudC5jb2RlKTtcbiAgICAgIH07XG5cbiAgICAgIHN1Ym1pc3Npb24uc3VibWl0ID0gZnVuY3Rpb24gKGFzc2Vzc21lbnQsIHN1Ym1pdHRlZENvZGUpIHtcbiAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAgICAgICAgJG1kRGlhbG9nLnNob3coe1xuICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3VibWlzc2lvblByb2dyZXNzRGlhbG9nLmh0bWwnLFxuICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IGZhbHNlLFxuICAgICAgICAgIGVzY2FwZVRvQ2xvc2U6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBzdWJtaXNzaW9uLmN1cnJlbnQgPSB7XG4gICAgICAgICAgYXNzZXNzbWVudDogYXNzZXNzbWVudCxcbiAgICAgICAgICBjb2RlOiBzdWJtaXR0ZWRDb2RlLFxuICAgICAgICAgIGZpbmlzaGVkOiBmYWxzZSxcbiAgICAgICAgICByZXN1bHQ6IHt9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBib2R5ID0ge1xuICAgICAgICAgIGNvZGU6IHN1Ym1pdHRlZENvZGVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3Qob3B0aW9ucy5iYXNlVXJsICsgYXNzZXNzbWVudC5pZCwgYm9keSlcbiAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LnJlc3VsdCA9IGRhdGE7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHN1Ym1pc3Npb24uaGFzUmVzdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc3VibWlzc2lvbi5jdXJyZW50LmFzc2Vzc21lbnQgPT09IGF0QXNzZXNzbWVudC5jdXJyZW50ICYmXG4gICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LmZpbmlzaGVkICYmXG4gICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgc3VibWlzc2lvbi5jdXJyZW50LnJlc3VsdC5wYXNzICE9PSB1bmRlZmluZWQ7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gc3VibWlzc2lvbjtcbiAgICB9XG5cbiAgICB0aGlzLiRnZXQgPSBTdWJtaXNzaW9uO1xuICB9XG5cbiAgYW5ndWxhci5tb2R1bGUoJ2F0LmFzc2Vzc21lbnQuc3VibWlzc2lvbicsIFtdKVxuICAgIC5wcm92aWRlcignYXRTdWJtaXNzaW9uJywgU3VibWlzc2lvblByb3ZpZGVyKTtcbn0pKGFuZ3VsYXIpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==