!function(s){s.module("at.assessment",["ngMaterial","at.assessment.editor","at.assessment.submission"])}(angular),angular.module("at.assessment").run(["$templateCache",function(s){s.put("assessment/assessment.tpl.html",'<md-toolbar class="fixed-toolbar">\n    <div class="md-toolbar-tools">\n        {{ assessment.title }}\n        <span flex></span>\n        <md-button ng-if="false">\n            Help\n        </md-button>\n        <md-button ng-click="editor.reset()">\n            Reset\n        </md-button>\n        <md-button class="md-button-colored" ng-click="assessment.submit()">\n            Submit code\n        </md-button>\n    </div>\n</md-toolbar>\n<md-content class="md-content-padding" style="padding-top:66px;">\n\n    <p>\n        {{ assessment.instructions }}\n    </p>\n\n    <section ui-ace="AceConfig.java" ng-model="Submissions.current.code"></section>\n\n    <section class="result" ng-transclude>\n\n    </section>\n    <!--<submission-result></submission-result>-->\n\n</md-content>'),s.put("submission/submissionProgress.tpl.html",'<md-dialog class="dialog-result">\n    <md-toolbar class="md-theme-light">\n        <div class="md-toolbar-tools" layout="horizontal" layout-align="center">\n            <h3>\n                Work in progress....\n            </h3>\n        </div>\n    </md-toolbar>\n    <div class="dialog-content">\n        <md-progress-linear mode="indeterminate"></md-progress-linear>\n    </div>\n</md-dialog>')}]),function(s){"use strict";function t(s,t,n,e){console.log(this,s),t.load(s.asssessmentId).success(function(){this.assessment=t.current}).error(function(){e.show({template:"<md-toast>Error !</md-toast>"})}),this.reset=n.resetCurrent,this.submit=n.submitCurrent}function n(){return{restrict:"EA",scope:{assessmentId:"="},templateUrl:"assessment.tpl.html",controller:"atAssessmentCtrl",controllerAs:"editor",transclude:!0}}function e(){function t(s){var t={};return t.current={},t.load=function(e){return s.get(n.baseUrl+e).success(function(s){t.current=s})},t}var n={baseUrl:"localhost/"};this.config=function(t){s.extend(n,t)},t.$inject=["$http"],this.$get=t}t.$inject=["$scope","atAssessment","atSubmission","$mdToast"],s.module("at.assessment.editor",["ui.ace","at.assessment.submission"]).directive("atAssessmentEditor",n).controller("atAssessmentCtrl",t).provider("atAssessment",e)}(angular),function(s){function t(){function t(t,e,o){var r={current:{assessment:{},code:"",finished:!1,result:{}}},i={};return s.extend(i,r),i.resetCurrent=function(){i.current=r,i.current.code=t.current.startCode},i.submitCurrent=function(){return i.submit(t.current,i.current.code)},i.submit=function(s,t){o.hide(),o.show({templateUrl:"submissionProgressDialog.html",clickOutsideToClose:!1,escapeToClose:!1}),i.current={assessment:s,code:t,finished:!1,result:{}};var r={code:t};return e.post(n.baseUrl+s.id,r).success(function(s){i.current.result=s}).error(function(s){console.log(s)}).finally(function(){o.hide(),i.current.finished=!0})},i.hasResult=function(){return i.current.assessment===t.current&&i.current.finished&&void 0!==i.current.result&&void 0!==i.current.result.pass},i}var n={baseUrl:"localhost/"};this.config=function(t){s.extend(n,t)},t.$inject=["atAssessment","$http","$mdDialog"],this.$get=t}s.module("at.assessment.submission",[]).provider("atSubmission",t)}(angular);
//# sourceMappingURL=data:application/json;base64,